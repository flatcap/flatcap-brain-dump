bcache
	why isn't it in maildir format?
	touch files, utime(2), to SENT_DATE
		doc crontab for cleanup
	plan to integrate offlineimap as bcache
	might need folder-name translation to match offlineimap

hcache that works offline!

use hcache to store other info?
	e.g. top tips - which are read

is hcache data hashed on fields in db, or all fields?
	i.e. why does HCACHEVER change so often

use startup hook & scripting + offline hcache
	to locally cache email
	local cache => strictly readonly

gahr, hcache
	one formatting string
	+/- override format strings
	separate code files
	autoconf hcache=X
	separate code dir?
	hcache/*
	all via hcache.h
	.so dyanamic library
	conflicts autoconf a bit
	multiple static/dyamic
	global?
	per mailbox?
	break deps on mutt structs
	rename "ctx" -- too confusing

multiple hcaches => RAID-like write many, read fastest
	two caches, local and shared?

merge hcache docs?

hcache
	when it's done, create an hcache test rig
	only use hcache API

easy task to rejig list of hcache backends
highlight current one?
	X Y (Cur) Z
	Cur (X Y Z)

hcache
	is it a binary blob based on HEADER?
	what causes cache invalidation?
	change of size, order? count of fields?
	change of endianness
	does hcache *need* to know about what's in the binary blob?
	just needs *key* to seed hash of data (data, len)
	hcache *doesn't* need to know about mutt
	key needs to be hashed on db name too
	when done, move to hcache/ dir

hcache files .<backend> suffix?

config "file" vs "dir/" is ugly and confusing

eliminate #ifdef USE_HCACHE for
	int mh_sync_mailbox_message(struct Context *ctx, int msgno, header_cache_t *hc);
	void * typedef if not def'd

hcache move conditionals to end of struct?

timestamp hcache entries for garbage collection

have cache settings per account (or per folder), with flags
	PREFETCH_ALL

all hc dump functions should be const
	need to disentagle dump_char_size first

move CharsetIsUtf8 out of hcache (param)

hcache namer
	split (root, dir, name) triplet?

check header and msg cache for dirs containing whitespace
	e.g. "Bulk Mail"

split the hcache serialisation by struct
	address_serialise
	buffer_serialise
	etc
each struct calls the children it needs
put in some version numbers, or
field type and length bytes before each field

hcache pruner
	use list of mailboxes
	use list of backends (you want)
	won't work for caching files, only folders
		unless we trawl through EVERY email
		might as well cache them too

hcache: x [y] z
	y = default

hcache auto magic everything

sync web & contrib versions of hcache benchmarks
	how?

have a NULL cache which is just a copy of the email
	might *still* need a DB of some info
	tie into offlineimap

cache files need to hash their name too
	to avoid two systems "sharing" a single hash
	and crashing

