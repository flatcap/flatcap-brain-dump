integrate scripting language
	lua, perl, python, ruby

lua as a testing framework: what would I need to expose?
	index functions?
	sidebar functions?
	variables?
	call functions
	macros
	send keystrokes
	get error codes returned from functions

lua initially debug only (for testing)

lua -> travis? / testing
	=> public access to test mailboxes

lua-testing => save_results()

---

lua colouring of
	email in pager
	index

∀ line
	call lua script
	pass copy of entire envelope
	pass line number
	returns:
		success
		stop now
		hide line
	callbacks:
		set colour (object)
		set colour (range)
		change line (new text)
		insert line (new text)
		delete line (num lines?)

Create a test rig
	cat mbox | test-rig config.lua
	ansi output

lua colour -- add regex
devel/lua - basic hooks and callbacks
devel/lua-index		}
devel/lua-pager		}-features
devel/lua-status	}

lua-index
	allow it to fold/unfold thread
	count/score children
	set fields

lua read inline scripts in mutt config

lua-index
	add lua expandos %L1, %L2, etc
	generated by external script

lua-highlighter
	is_alias() for highlighting addresses

lua-folding
	works on pager
	a la vim
	linewise read through file once

lua-highlighter
	needs flags:
		header, body, continuation line
		quoted (user regex), signature, weeded

lua-index-colour
	if it returns TRUE, don't use Mutt's colours

lua-folder (something that folds)
	works on index

lua highlighter
	∀ languages
	in the pager, e.g. markdown

lua highlighter use:
	hideline()
	amendline()
	to turn diffs info diff-so-fancy?
	can this be done with external filter?
	message-hook?
	then clever highlighting?
	maybe

