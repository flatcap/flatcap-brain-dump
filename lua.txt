integrate scripting language
	lua, perl, python, ruby

lua as a testing framework: what would I need to expose?
	index functions?
	sidebar functions?
	variables?
	call functions
	macros
	send keystrokes
	get error codes returned from functions

lua initially debug only (for testing)

lua -> travis? / testing
	=> public access to test mailboxes

lua-testing => save_results()

---

lua colouring of
	email in pager
	index

∀ line
	call lua script
	pass copy of entire envelope
	pass line number
	returns:
		success
		stop now
		hide line
	callbacks:
		set colour (object)
		set colour (range)
		change line (new text)
		insert line (new text)
		delete line (num lines?)

Create a test rig
	cat mbox | test-rig config.lua
	ansi output

lua colour -- add regex
devel/lua - basic hooks and callbacks
devel/lua-index		}
devel/lua-pager		}-features
devel/lua-status	}

lua-index
	allow it to fold/unfold thread
	count/score children
	set fields

lua read inline scripts in mutt config

lua-index
	add lua expandos %L1, %L2, etc
	generated by external script

lua-highlighter
	is_alias() for highlighting addresses

lua-folding
	works on pager
	a la vim
	linewise read through file once

lua-highlighter
	needs flags:
		header, body, continuation line
		quoted (user regex), signature, weeded

lua-index-colour
	if it returns TRUE, don't use Mutt's colours

lua-folder (something that folds)
	works on index

lua highlighter
	∀ languages
	in the pager, e.g. markdown

lua highlighter use:
	hideline()
	amendline()
	to turn diffs info diff-so-fancy?
	can this be done with external filter?
	message-hook?
	then clever highlighting?
	maybe

C to search for pre-compiled lua first

lua -> masterclass
1 commit for each
	add variable
	add function
	add autoconf

generic stack poppoer
	n entries
	check type
	get value

commits
	call from C
	check retval
	call C from lua
	register C function
	pass data to lua
	recv data from lua

example lua code in commit messages

get lua working on travis

get darnir to check lua autoconf

call out to lua:
	send it lots of NeoMutt version info
	mutt ver
	date
	patches
	etc

lua-index-icon
	use case: github
	gh sends notification emails
	cc: field is coded, e.g.  state-change@gh.com
	turn that into a coloured icon

lua-sidebar
	mess with counters, e.g.
	drafts folder: set new count = total count
	for visibility

lua-config
	lua-execute
	allows loops, etc

lua-config like php to embed lua in normal muttrc?
	<lua> </lua> tagged?
	how would lua output something to be processed by mutt?
	special function? (like printf)
	override the print function?
		how?

lua-new-mail
	scripts to mark, tag, move mail etc

lua-terminal-title
	script to generate title
	given lots of info about
	- current mailbox
	- current email
	- etc

scripting
	one state can preserve info between calls
	=> should NOT be shared between areas for security

prevent scripts from accessing passwords
	possible?

lua states may not get the same
	variables set
	embedded functions
	(primitive sandboxing)

embed colours in text (from scripts)
	<#RGBA>
	<#default>

export mutt_regex_match
	for compatibility

inline lua script could allow a if/then conditional, e.g.
	<?lua if (false): ?>
		muttrc on true
	<?lua else: ?>
		muttrc on false
	<?lua endif ?>

lua-mark-old
	(enter/leave) timestamp
	can mark read, old, do nothing
	(nothing if you're just flicking through)

lua-cron
	queue scripts for later

lua-hooks (for existing mutt hooks)
	XXX-hook = lua:file.lua

lua-script-manager to control scope/lifespan of lua states
	lua_open (name) returns
		opaque pointer or
		int handle
	lua_close (handle)

lua-forall-index
	iterate through every mail
	order by:
		index sorting?
		variable?
		ask script?
	Options:
		shallow (thread head only)
		width-first
		depth-first
		max-depth
		sort order

lua-variables
	every script called twice
	first call with INTERROGATE_VARIABLES=1
	if script sets vars and returns I_SET_VARS
	use those vars to control future call(s)

lua-sort
	qsort but export logic to script

lua-highlighting
	need subtle indicator in mail body, e.g.
	`C
	code
	`
	single backtick to end

lua-index needs both label and notmuch callbacks

lua-highlighting
	backtrace mode

script to delete duplicate emails on the mailing list
	save outgoing email in mailing list
	when "public" copy arrives, delete the "sent" copy

make "lua" a medium task

lua styling/colour callback
	c functions: hprintf(), push_attr(), pop_attr()
	shared definitions: C_FG_RED, C_FG_BLUE, A_UNDERLINE, A_REVERSE, etc
	c       lua_style_line(HANDLE, DATA[])
	lua     hprintf(HANDLE, "hello ")
		push_attr(HANDLE, C_FG_RED)
		push_attr(HANDLE, A_REVERSE)
		hprintf(HANDLE, "world")
		pop_attr(HANDLE)
		pop_attr(HANDLE)

(un)new_mail_filter lua [lua...]

new-mail-hook + lua to filter
	=> need filter manager

