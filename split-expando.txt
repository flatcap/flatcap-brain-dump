Split up mutt_expando_format()

`mutt_expando_format()` is a powerful, flexible, function that transforms `printf(3)`-like strings.
It's used in config variables, hooks, color specifications and more.

The basic function
The problem with `mutt_expando_format()` is that it **does too much**.

47 alphabetic chars: AaBbCcDdEeFfgHhIiJKkLlMmNnOoPpQqRrSsTtuVvWXxYyZ
1 non-alphabetic:    !
5 multi-char:        Fp Gx zc zs zt
4 bracketed:         (fmt) [...] [fmt] {fmt}

separate function for each letter?

what about multi-letter combos?
what about ${name} in the future?
lookup tables passed for callbacks
[] { key letter / string, fn }
need data for each array
	or possibly for each letter
pass params of (array, data)
	-> callback(opt letter, data)
does this mean sharing letters?  NO
	(unifying them across callers?)

pass array of { string, function, data }

Each caller can specify their own letters, but choose from standard callback
functions, or supply their own.

code: expando dir for common callbacks
	dependent on libmutt, libemail

mutt_expando.c contains callbacks for views, MailboxView, EmailView (if nec)

functions in base
	actually formatting
	precision
	if/then/else
		how?

functions in callback
	generate string from data
	no formatting
	no precision

pass flags to base
	ALLOW_CONDITIONAL

pass flags to callback
	callback-specific

conditional -> numeric (== 0) or (!= 0)
	but we're passed a string
base parse letter, precision, conditional, callback for string -> buf
if cond type, flag the callback function
	recurse with 'if' or 'else'
alloc buffer, allow cb to realloc if nec (big filename?)
how is colour handled if cb doesn't manage precision?
	[C-on]apple[C-off] -> [C-on]app[C-off] ?
	or just truncate at text and END colour
	need to truncate in text, not a magic (color, or tree, etc)
can't pass opt struct to callback
	need specific letter
	in case many letters have the same callback function

subject "tree" is an EV (view characteristic)
	"tagged" too
all fields and colours are limited to their column
	except indicator, selection, highlight
	index line regexes
	where are they added?
unless multi-coloured (e.g. tree+subject)
	don't end colour in callback?
	let base do it after truncation
put common callbacks in their associated source
	EV in email_view.c (or mutt_email.c)
	Ctx in context.c

base function, separate functions to
	identify start of expando
	parse conditional into
		expando
		if clause
		else clause
		next char
	parse/apply precision

