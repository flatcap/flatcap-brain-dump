Neomutt patchsets against
	1.5.24
	default

numbered, ordered, series

change mutt: readme, changelog, version number
	floating branch
		build fixes, tidies, etc
	internal name to neomutt?

All patches:
	compress, ifdef, indexcolor, keywords, nntp, notmuch, sidebar, trash

mutt
VERSION = 1.5.24/default

mutt-VERSION-neo-YYYYMMDD.zip

mutt-VERSION-neo-YYYYMMDD/
	01-ifdef.patch
	02-sidebar.patch
	03-notmuch.patch

PATCHES:
	ifdef-neo-YYYYMMDD
	sidebar-neo-YYYYMMDD
	notmuch-neo-YYYYMMDD

neo add a point release to make ours newer

README.neomutt?
	neomutt.patch (0 in series)
		combine first into all sets
	project details

This patch is part of NeoMutt: Bringing together all the Mutt code
	https://github.com/neomutt

The latest version of this patch can be found at:
	https://github.com/neomutt/flatcap/releases/latest

released as a set of patches

check all patches for the introduction of bad whitespace

--------------------------------------------------------------------------------

devel -> neomutt
	with orphan "patches" branch
README.md
LICENSE.md
11 basic patches
	cond-date
	fmemopen
	ifdef
	index-color
	initials
	nested-if
	progress
	quasi-delete
	status-color
	tls-sni
	trash
5 big patches
	compress
	keywords
	sidebar
	nntp
	notmuch
obsolete file for each patch
readme file for each patch
	same as in main feature branch?
	customised to patch branch?
patch X
	X.patch
	X.README.md
	X.obsolete.md
series for for all patches
patches rebased to fit together in this order
branch containing patched code
matched release for full code
DEPENDENCIES.md
	graph for ordering patches
neomutt patch (last in series), changing:
	version number
	README
	etc

semantic versioning of neomutt x.y.z
	x = new version of mutt base
	y = new feature patch, or
	    patches reordered
	z = bugfix existing patches
start versioning with x=24?
	24.0.0 = mutt 1.5.24
what about default branch?
	dated?
	no versions
	just latest patches against dated default branch

--------------------------------------------------------------------------------

modify patchlist.sh to turn "-neo" -> "-neo-YYYYMMDD"
	or -neo-UNKNOWN
	or -neo-git
	or -neo-devel
	or -neo-default
	or -neo-stable

patches -> neo-UNKNOWN
neomutt mods matchlist.sh -> neo-YYYYMMDD

mutt   -> patches -> neo
1.5.24    patch-X    .1-neo

On default branch -- set of flat patches
	rebase often
	patch name = name-neo-devel
		still needs to be version numbered/dated

--> mutt-1.5.24 --> patch1 --> V --> V -->
	V       --> patch2 --> | --> | -->
	|       --> patch3 --> | --> | -->
	|       --> neo    --> | --> | -->
	|                      |     |
	|                      +--> 20160207 (octopus merge)
	|                            |
	|                            +--> 20160210 (octopus merge)
	|
	+--> (20160201 + P1 + P2 + P3 + Neo)
		=> Every release is dupe of all patch histories

--> mutt-1.5.25 --> patch1'	Every mutt release flatten patches & rebase
		--> patch2'
		--> patch3'
		--> neo'

Patches
	orig + newer + tidy + docs + version (name-neo-version)

neo patch has script to generate patches?
	just use format-patch (ordered, stackable series)
octopus merge can't separate out patch series
release => tag, (patch set, series file), (patched mutt src), (docs, single html)

docs/readme link to *specfic* release on github
release on github links to *latest* release
	=> editing many files
	NO point all refs to latest otherwise => commits on unchanged repos
	or fuck with the merge commits!
	sed 's/UNKNOWN/YYYYMMDD/'
	up-to-date obsoletes.txt

neomutt/ branch with YYYYMMDD subbranches
kz/      branch with YYYYMMDD subbranches
	
where do dependent patches live?

--> mutt-1.5.24 --> patch1 -------> p1' -> p1''
		      |              |      |          
		      |              V      V          
		      +--> patch2 ->p2' -->p2''         

neopatches
	individual minors
	sidebar only
	notmuch + deps
	everything

