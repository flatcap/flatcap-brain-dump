multiple progress in parallel
nested progress bars for subtasks?
how to display?
	braille or sparklines
	allow four lines
	or lots of columns with 4 graduations

option to use terminal title esc seqs

better progress indicator
	a la dnf, wget, etc
ETA?

docs
	set time_inc = 0 for best results (ref: paravoid)
	test read_inc, write_inc, net_inc too

create progress API
	encapsulate read_inc, write_inc, net_inc

create()
update()
destroy()

LL_PROGRESS for displaying

call update every loop of the action

limit by
	time (ms)
	count (n'th)
	%age (n)

do we need open-ended bar?
block just moves back and forth?

set range on start (1234)
update (x) on the same scale

store start time in P
	user can show elapsed time
	calculate ETA (if > n secs)

callback function (P, data)
	run when needed
	include screen width

colour bar optional
callback generates text

disposable messages
	progress - displayed but not saved to ErrorBuf!

convert other lists of msgs to *real* progress bar
	Reading message 1..1000, etc

progress could mutt_debug(1) for:
	start, interrupted, stop
for reference purposes
log already has time stamps

option for coloured underline as progress meter
	or underline entire line and change colour as it progresses

use progress underline in sidebar when loading mailboxes (in parallel!)

have progress code do message formatting
	so if there are 1000s of messages
	progress can nop them if it wants
	progress_update(P, num, fmt, ...);

progress messages
	log only if previous message != progress
	log last progress message too
	need to cache them

**Ideas**:
- Record progress bar info too, e.g. 100%, 45sec, "Opened mailbox"
- Take into account:  $read_inc   $write_inc   $net_inc
## scripts -- Show a list of config files loaded

Progress becomes notification
	does it always have an object?
	analyse use
Progress notify happens on P object (parent is M or E)
	P object has M/E ptr?

progress clear on 100% means 100% will never be shown to user!
time mbox, maildir, imap with LARGE mailboxes, cf mutt & old neomutt

progress - how to do progress_done() cleanly on all error paths

status bar:
	sub-window for progress bars
	initially 0-width
	each new progress adds to window
	Label [XXXXXXXX........]
	Label [XXXXXXXX........] Label [XXX.............]
	or shrink
	[XXXX....][XX.......]

progress API -- copy logging API
	have global progress dispatcher
	extern struct Progress *MuttProgress = progress_disp_{window,text,null};

