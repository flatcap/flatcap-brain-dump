ellipsis
	mutt_error
	mutt_message
	mutt_debug

#defines → enums?

make AUTHORS -- which repo did this?

Ultrix dead '95
	ask debian devs for list of working arches

init all vars
lots of static fns → _fn_name?
^L in source
Doxygen comments

Vim-style
	:set     → show all modified vars
	:set all → all all vars
	:unset === set novar

strict compilation flags; c++ compiler?
unnamed args in function prototypes
spurious \ line endings (in middle of if!)

────────────────────────────────────────────────────────────────────────────────

Notifications

Window changes
	hidden	no params
	visible	rect
	resize	rect
	focus	in/out
colours changes
keypress	key, no params
config change	key, value
		ALL, no params
mail status change
	read/unread/flagged/deleted/edited
	MESSAGE_ID, flags
mailbox change
	new/deleted
	new mail, deleted mail, flagged mail, etc
connection status
	connected
	disconnected
quitting - any use to anyone?
selected mail changed
selected mailbox changed

wrapping →
	extra char at beginning of line "+"
	extra char at end of line "<-/"
wrap at:
	char
	word (whitespace)
	clause (punctuation)
	sentence (.!?)
No wrap →
	extra char at end of line ">"

────────────────────────────────────────────────────────────────────────────────

send escape sequence to clear terminal title when mutt closes
init.h struct option_t needs enums for types and union for data
timer notifications, e.g.
	highlight something for three seconds, then return to normal
https://github.com/N8Fear/mutt-kz
	some initialisations improvements
	some bug fixes

sidebar_dividers
	first (wide) character is vertical divider
		between sidebar and index/pager
	second (wide) character is horizontal divider
		between different mailboxes (within the sidebar)

need attention
	draw_sidebar
	OPTSIDEBARSORT
		sorts by real path, not visible name

check for unused #include
sort includes <>, ""

sort init.h, globals.h, etc

kill one-line if's:
	if (adsfa) command;

~50 lines of commented out source
	/* ... ; */

possible to fix sidebar sort order to respect hierarchy/indentation?

gentoo sidebar_format
	set sidebar_format="%B %* %S%?N?(%N)?%?F?[%F]?"

sidebar_width = auto (size to contents)
	would need to parse and format all strings ahead of drawing divider

test sidebar width if fixed string breaks bounds
	set sidebar_width=10
	set sidebar_format="ABCDEFGHIJKLMNOPQRSTUVWXYZ"

cleanup:
	docs - in code and html
	comments
	whitespace
		unfold lines
		indent
		rebracket
		refold
	sort options in
		init.h
		globals.h
		functions.h
		switches
	doc switch drop-throughs

sorting
	if displaying full paths:
		sort by display name
		sort by underlying name
	if displaying indented paths:
		sort by top-level names, then children

New only -- include structure (empty dirs) to keep hierarchy
	mail (0)
	  fruit (0)
	    apple (1)

if ((!visible) || (size == 0))
	make sure no work is done

trim trailing slash from mailboxes, folder
	shouldn't be displayed

check all headers #include requisites for compilation

while(1), rather than FOREVER

sb_set_curbuffy
sb_set_buffystats
	should probably both return BOOL on success/failure

sb_set_update_time should return the timestamp

sb_draw should return success of drawing
	possible given all the callbacks, etc?

quiet config option -- don't whine about unknown config options
	or quiet command line option

sensible retvals on functions

command
	sidebar_toggle_visible
	sidebar_toggle → sidebar_toggle_virtual

────────────────────────────────────────────────────────────────────────────────
missing patches
	lightweight

DBUS plugin -- to do what?
	notify out
	take input to do what?
		accept mailto: links

repaint if:
	size changes
	position changes

Changed posn notification ONLY
	e.g. sidebar has swapped sides
could imply that cached data may be OK to reuse
	e.g. don't need to call calc_boundaries

Notify (Box*, Rect old, Rect new, flags)
Flags:
	too small to render
	changed visibility

Changelog, etc for sidebar

────────────────────────────────────────────────────────────────────────────────

Sidebar actions (that might precipitate change):
	line-up
	line-down
	page-up
	page-down
	set buffy from browser
	change sort order
	add mailbox
	delete mailbox
	change mailbox's sort criteria (e.g. flag an email, a flagged-sorted mailbox)
	resize window
	hide sidebar
	show sidebar
	open folder

────────────────────────────────────────────────────────────────────────────────

draw sidebar
	assumes position/size
	move due to STATUSONTOP, HELP
	check of show/hidden has changed & refresh numbers if nec
	if hidden, do nothing
	sanity check settings
	draw divider (3 chars!)
for all buffers
	set colour
	move
	gen displayname (need to cache this)
		name, bytelen, screenlen
		what about config changes
			including sort order
	make sidebar_entry
fill remaining lines with blanks

Start; Incoming; Inbox open; current = Incoming; sort → cur is offscreen, boundaries lost

────────────────────────────────────────────────────────────────────────────────

tree chars for sidebar hierarchy?
sidebar: how many colours?
CLEARWIN takes a *y* param, not x, likewise sidebar variant

need sensible colour scheme, by default, otherwise highlight won't be visible!
parse_mailboxes -> notify sidebar => know if anything's invalidated TBCH
can I use realpath(), mutt_expand_path() for anything?

Unmailbox * ⇒  many notifications followed by ONE redraw

can the real status bar display any sidebar fields?
	why not?
	how can they be integrated?

most options are "short" limited to +/- 32767
mutt-sidebar.vim (contrib dir?)
set/unset/toggle?  invVARNAME
option - don't sort inbox -- defined how?
separate modules -- sidebar, index, pager, help? -- each with
	init()
	notify()
	close()
	config()
sidebar_wrap=search,motion (separate bools for simplicity?)

sidebar_sort is an enum - on set error, it could show the valid values
quadopt can give help too -- important since varname gives no clue about type
break up init.h, globals.h, functions.h
	init.h option DELEGATE, prefix "sidebar_", callback?
init() on module calls add_options()
	=> sb_opts refer to sb-private vars in sidebar.c
option breakup depends on lots of notifications
Where are OPTSIDEBAR* used outside sidebar.c
	curs_main.c, buffy.c, mh.c
any use from calling sb_init(), sb_shutdown() from main()?
	probably not yet
TEST: deleting/adding entries on/off-screen
	are our indexes correctly maintained?
TEST: refresh limit -- changing vars from another mutt
TEST: (re-)sorting by changing sort criteria from another mutt
Distinguish between movement and search wrap?
	movement - next/prev (1 line), page up/down
	search - find next/prev new
Readme.sidebar, Changelog.sidebar?
does imap folder add/rm trigger our sb_notify?
Config change notifications
	fn (name, old_val, new_val)
how would function delegation work?
	init() -> add_functions (name, callback)
	the callbacks would need to be able to manipulate mutt objects
Register functions & callback
make sure anything we need is exposed
if we hide our globals, give then all accessor functions get/set_VAR()
init would need to register new sort methods

get rid of REDRAW_SIDEBAR, or use it effectively

can I internalise sb_should_refresh()
often call:
	buffy_mbox_update
	buffy_maildir_update
	mh_buffy_update
what if there are multiple top-levels?
should the LastRefresh var be on the top-level?

demo setup - lots of files in:
	local mbox
	local mh dirs
	IMAP mbox
	IMAP mh dirs
	POP mbox
	POP mh dirs

possible to eliminate sb_get_highlight?
	only called on OP_SIDEBAR_OPEN
	in curs_main.c

move mappings from index/pager -> generic
	in functions.h

tests:
	set all config options to: valid, invalid, empty
	both in muttrc and within mutt

only draw divider if
	visibility changes
	width changes
	char changes
	etc
	NO too many variables

any use for ACS_VLINE from curses?
	when do I know it's safe to use?

sidebar expandos
	%c number of non-deleted emails (total - deleted)
	%s = %c? (lower case version of %S?)

add copyright where I've written code

Don't need to actually SORT the BUFFYs, just sort our array
and work from that.  That way SORT_ORDER => unsorted => mailboxes
in their original config order.
Implies we need our own Incoming pointer? or just array[0]?

alternative to lightweight patch
	don't update info ∀ BUFFYs
	just update the current page
	only update lists when the user OPENs a folder
	not when they move the highlight
	could pre-emptively populate the previous/next pages

simpler way to generate graphs?
git log --format="h_%h h_%p %D" --branches --simplify-by-decoration

postpone patch doesn't quite work
	1) The PostContext and menu are private, so sidebar can't tell that
	   we're looking at the postponed list after navigation.
	2) After navigating to another folder, you still have to "quit" to
	   get the display to refresh.

sb expandos
	compare letters to status_format letters
	deleted?
	number after limiting
	unread?

notmuch
	add new virtual folders to sidebar
		automatically?
	what name should it be given?
		automatic?
			allow user rename?
		ask user?
	how can we make them persistant?

Where does getchar() get called?  can I centralise them?
Does getchar() wait or poll?  Need it to poll
Polling -> Idle -> Event callback that I can use to populate BUFFYs
sidebar needs NO-selection possibility for toggle-virtual
need to clear index on Toggle-Virtual

sb extra colours for:
	readonly mailboxes
		expando?
	bad (non-existent) mailboxes
		expando?
	virtual mailboxes
	what other attrs?
	colour by SRC
	separate colour schemes by SRC?

todo
	integrate nntp into sidebar
	what does notmuch return?
		how do i link it to existing objects?

floating patches/branches
	history -> HEAD
		      \-> neo branch
		      		\-> min build branch

Cedric, VVV, DGC -- check for any utils patches use
	ifdef, nested if, xlabel_ext, purge

Undo, what's possible?
	Last action?
	Many actions?
persistant undo on email editing?
undelete?
unsend?
tagging?

look through gmail labs, etc, firefox addons for email plugin ideas

signature manager
disposable email address plugin?
	need external API to send/receive

all patches --
	PATCHES
	configure
	USE_X
	default configured off

Alternate views in the sidebar
	need toggle function
	imap: folders  <--> dir tree
	local: folders <--> dir browser

	address book? -- different grouping/hierarchy?
	calendar? -- different timescales?
	news?  subscribed   <--> all groups
	rss?   unread feeds <--> all feeds

data source LDAP

fix copyright dates in all patches

which config items require frequent and costly interpretation?
	all format strings -- every line, every refresh

keep revision number for all config items (as a prelude to proper notifications)
	only increment revision number on change
	leads to possible A-B-A problem (change blindness)
	if (ver(format_str) > old_ver) STMT;
	allows code to make informed decisions about caching

cache for formatted strings?
	too much can change
		index: flags, folded-ness
		sidebar: all numbers => cache invalid

index format -- full directory mode
	show unix perms like ls
	user/group/etc
	too specific?
	what about other OSs?

refer to and compare config names by hash only?
	save lots of string compares
	gperf to generate perfect hashes

cache sidebar formatted strings on BUFFY object?

what are the objects in the Index?
	cache the index formatted strings on them

introduce new format strings
	index_rich_format

break up and rewrite mutt docs
	break into smaller sections
	separate mutt-doc repo
	translate sections (default to english if missing)

code: switch default must be at end
mutt folder/dir browser
	".."/open should start with current folder/dir selected
	display full path at top of screen/statusbar/titlebar
dependency graph of all patches
BOOL -> enum?  what about the bitfields?

git
	document git attributes for PATCHES
	create git diff regex for manual.xml to identify the section where the changes occurred
		grep "<sect[0-9] " manual.xml.head 
		need to look for <sect> <chapter> <table> <example>
	check the default 'c' git diff regex against sidebar.c
		check C function
		check C struct/enum

compare conditional builds
	#ifdef
	+/- FEATURE
	configure.ac
	Makefile.am
	compress.c always compiled in?
	nntp.c always compiled in?

regex/regexp pick one in code/docs
	manual.xml
		regexp 65
		regex 7
	*.[ch]
		regexp 48
		regex 25

Generated muttrc is an encyclopaedia
Supplied  muttrc is a guide for dummies

Set out notification emails as a nested set:
	Announcement = neomutt description, list of features, links
		Feature X - feature desc, credits, list of files changed, links
		Feature Y - ditto
		Feature Z - ditto
	allowing people to criticise each component individually

docs/muttrc/readme/init.h
	need to document default values for variables

mutt bug - mail isn't from me when it's from
	jimrich@flatcap.org
	bobrich@flatcap.org

index_color should apply to status_bar when viewing mail
status_color should apply to mid-status_bar when (pager_index_lines > 0)
shouldn't be affected by 'status_on_top' either

cond-date
	all,dates,are,broken@ 1y -> this year (not 12 months)
		1w -> this week (not 7 days)
		if the dates were sensible (7d = 7 days back from now)
		they'd tie in with ~d, e.g.
			color index color237 default "~d>30d"         # Over a month old
		reuse the ~d code
			pattern.c:eat_date()

replace " with ' in muttrc

auto-generate merge commit messages
	modified git log msg
	script for authors
	commented out - but accessible?

git hook variables
	prepare-commit-msg
	GIT_DIR
	GIT_WORK_TREE
	GIT_INDEX_FILE
	GIT_PREFIX
	GITHEAD_XXX

use PATCHES to show bugfixes?
	bugfixes:
		bug1
		bug2
		...
	patch-xxx
	patch-yyy
or
	bugfix1
	bugfix2
	patch-xxx
	patch-yyy

minors - comments for any full functions
	ifdef, index-color, progree, status-color, trash

notmuch - fix dependencies
check minors for () -> (void)

should static functions be called mutt_*?
check minor new functions are static

tidy - check files for leading/trailing whitespace at ends of file
	check for redundant empty lines

cond-date add docs to index_format in init.h
bugs - sidebar - note refresh not really working
community script check for update
	date community docs?
	or just rely on commit date?
resolve - sort desc, draw status line, open folder
git jump function -- figure out if diff or merge is needed

docs
	add tests.txt
	todo list of ideas

use sort_aux for nested sidebar names?
	no, sub-folders are same type?
		no
	YES: allows to sort by name, then subsort by new-count
	separate variable otherwise it interferes with index, etc

kz issues -- which apply to me?
docs refer to alias menu but don't mention how to invoke it
browser
	can sort my num new msg, but can't display count itself
	sort needs docs -> promote to feature?
		check kz for docs/examples
	%n isn't representative of "all message count"
		doc as (N)umber of messages, or
		%c message (C)ount

do format conditional work on strings, etc?  meaningful?
	empty => false

check all xml anchor names

compress
	limitations -- filenames
	document %f %t need to be quoted
		limit filenames
		can't contain quotes
			'' can't contain '
			"" can't contain "
		need code to escape filenames
			would need to be done in an OS-dependent way

compose sidebar changelog
	abridged

compress -- hooks should be considered first, then default mutt behaviour
	need test-hook i.e. "is this an xz-compressed" file?
	mailbox type should be per-hook-set

change docs to use <example>

cond-date needs some concrete examples

source command -- allow wildcards
	fits in nicely with ifndef
	or 'source_dir' command to read all contents
	or "source dir" to read all contents
	recursive option?
	recursive by default?

manual "variables" need description field

'c' fails if dir has trailing /
	e.g. when you use <tab> to complete!
'c' to open fails, test cmdline open too
	check sidebar displays correct highlight/open

changes to css must set both fg, bg
	cf <note>
	reduce colour of <command>s too

separate draw() in sidebar for
	emails
	notmuch
	nntp
	addressbook?

sidebar indented folders
	fill in gaps in hierarchy automatically
	make them non-selectable (unless the user has "mailboxes" them)
	alternatively, have some way to mark mailboxes as "fake"
		probably a horrible idea

neomutt motto?
	integrate it first
	decide whether to keep it later
	We accept! (patches)
	If we take your patch, you are responsible for fixing it

BUG: sidebar gives OPEN highlight even if the opening failed
	e.g. bad mailbox

enumerate changes to manual.xml.head
	split up?
	how?

attach sets of keybindings to panel hierarchy?
modify docs generation to process commands' comments
can some keybindings be set "only active when window is visible"?
	=> help doesn't (necessarily) hide sidebar
		should sidebar keys work?  probably not
	*should* help hide the sidebar?
		probably yes

CENTERLINE is unused
PAGELEN is used in ONE place

how should mutt_yesorno() work?
	Question is asked modally & outside are of asker
	=> hide command line, show question
	question panel gets request, shows itself, hides command
		make command-line panel invisible?
		make question panel higher in z-order?
			=> they are coincident

how about modal dialogs?
	1 dialog could invalidate sidebar, index, pager
	sibling to sidebar, index, pager but last in list (z-order)
	sb, index, panel get painted, then "floating" window gets painted over
	modal => disable key mappings/propagation

what does Sidebar *really* need?
	Incoming BUFFY -> notifications of BUFFY changes
	Panel (geometry) -> notifications of WINCH
	character libraries -> lengths, widths, formatting, etc
	options (config access)
	colours
	curses: clear(panel), clear(line), write (char/string), move(x,y)
		curses calls are all (0,0)-based
		curses takes panel object and converts to screen coordinates
		∀ users
	callbacks for functions
	sb is initialised with (Panel pointer), notifications on change
	can query Panel's size, position (not useful), visibility
	panel can be visible, but !active, e.g. partially under a modal dialog
		=> paint if asked, but won't receive keys
		could still be asked to do stuff by dialog, etc

XXX in new features

lots of preprocessor symbols that use #if on undefined symbols
	warning: "DEBUG" is not defined [-Wundef]
	warning: "HAVE_DB4" is not defined [-Wundef]
	warning: "HAVE_GDBM" is not defined [-Wundef]
	warning: "HAVE_QDBM" is not defined [-Wundef]
	warning: "SYS_SIGLIST_DECLARED" is not defined [-Wundef]
	warning: "USE_UNLOCKED_IO" is not defined [-Wundef]
	warning: "_STRING_ARCH_unaligned" is not defined [-Wundef]
	warning: "__alpha" is not defined [-Wundef]
	warning: "__sun__" is not defined [-Wundef]

find untranslated strings, i.e. missing _()
	mutt -v output is missing some

kill version.c:rstrip_in_place()
	fix external build scripts

compress features
	example of tar.gz of maildir mailbox?
	compress won't be able to tidy up
	unless...
		compress creates a dir
		extracts to that dir
		deletes entire dir on close

compress
	change hook placeholders to be more descriptive?
	%t -> (T)emp file
	%p -> (P)laintext file
	%c -> (C)ompressed file

vim library of config options(vars)
	auto-extract from init.h

sensible-browser-position only sensible for sort=alpha or unsorted
	what else?

fix brain-damaged dprint
	macro redirect
	dprint(X, (a,b,c))!
	debugfile tested even if not used
	move all tests into mutt_debug

rewrite mutt_wstr_trunc()
	first, rename variables to be something sensible
	second, refactor to be legible

diagram
	git branch for labels
	git tag for labels
	git log ∀ commits sorting my hash
	stop @ m24
	for each branch/tqag recursively backtrack
	or recursively delete starting at cutoff (m24)
	commits may be older, but they won't be in the past history
	first pass of remainder - first parent only - mark merges
	neomutt special case: cartouche of uniq icons + yellow neo (non-merges)
		=> icons for Sidebar and NotMuch (or capital letters: S, N)
		what about NNTP?  Compress?
	label merges with [M]?

macros() should be MACROS()

need back-porters to maintain 1.5.24 branches
	need separate branches for 1.5.24/1.6.0
	how do I name them?

gitflow for neomutt branches (and devel)

smime.c:
	variable set to NULL after safe_fclose
	safe_fclose (&smimeout);
	smimeout = NULL;

check everyone's using safe_fopen(), safe_fclose(), etc

rename safe_X(**ptr) to X_null?
	safe_free -> free_null (**ptr)
		-> free_n ()
		-> n_free ()
		-> free_and_null ()

change prototypes for the X_and_NULL macros
	free() doesn't take a double pointer, so
	FREE() shouldn't
	rule of least surprise

try to reduce the scope of all variables
	too many variables are declared at the start of a function
	when they only get used in an if/for/while loop

#define mutt_new_header() safe_calloc (1, sizeof (HEADER))
	et al ought to cast their returns to the correct type

lots of pointers being assiged to 0
	unsigned char *pending_exact = 0;
        should be NULL

kdave - limit-current-thread
	alt-l (show limit) should respond "limit thread"
	is "limit ." the same as "limit all" -- YES
		fixed internally
	create unlimit patch and pull-request for kdave?
	limit doesn't have any context, just a pattern
	limit-current-thread NEEDS to know current email
	it'd be nice to change limit to accept another "string" arg
	currently
		"all" -> "~A"
	change limit
		"thread" -> "~a" (only letter available)
		let general limit machinery do the work
	unfortunately they can't see the current email

save email doesn't respect the umask
vimlocal - check .git dir -- safe from git clean!

merge commits contains: "Closes: #1234" to perform auto-close pull-request/issue
wiki coding style:
	indent, {}s, ()s, function defs, examples of correct
notmuch -- independent of sidebar
	#if defined(USE_SIDEBAR) || defined(USE_NOTMUCH)
	around some blocks of code

integrate patchlist into new version of ifdef checking
neomutt default notmuch, sidebar to 'on'?
wiki: doc travis and coverity options
missing qdbm, slang-dev
CONTRIBUTING.md (appears when creating an issue)
split source?
	tools/ - standalone exes
	library/ - replacement library functions
	readme/ - obvious

mail, compress, dev build patches, examine coverity build log
gh-pages for up-to-date manual (in sections)
	front redirects to wiki
todo before 1.6.0 release?
	remaining features -> neo (even if not merged)
	dev branch if not neomutt-ified (i.e. PATCHES, templated docs)
	release devel patches separately (but at same time as neomutt release)
		neomutt-patches-YYYYMMDD.tar.gz
		neomutt-devel-YYYYMMDD.tar.gz
	=> dev branch parallel to neomutt?
		all dev features merged?
		too much work for now
		keep unmerged

typo hdrline.c %g message labes
bugfix 8 - hurd -- what happened to it?
credits -- neomutt specific - add anarcat
fmemopen - merge into one place in mutt_mktemp()?
	idea from dgc email
sidebar intro missing from features sidebar
website broken link to flatcap.png
rebase and refactor [devel/*] before moving to [feature/*]
	factor this description into new-feature txt
sidebar, when saving email to a folder use the sidebar as a selector?
	new indicator colour or prompts "select save folder" + normal highlight
mass IRC dev chat (invitees can speak) others can watch
	need agenda to keep to topic
join mutt-users and ask both lists what patches/version they're using
	send me your "mutt -v"
	any security risk to this information?
	OS info useful too
Do drafts *need* to be stored in a separate folder?
	why not inline?
	in threaded order
	just tagged or coloured
	status flag to denote draft
mailing lists
	announce	2984
	users		1307
	dev		538
email David Sterba (kdave) -- limit
	use context, or change prototypes
update website manual for 1.6.0
screenshots on website
watchers/stars on website home page
	neomutt version
shields.io
	✓ travis build (general)
	✗ travis build (branch)
	✓ coverity
	✗ github downloads
	✗ github tags
	✓ github release
	? github commits
	✓ github stars
		https://img.shields.io/github/stars/neomutt/neomutt.svg?style=social&label=Star
		https://img.shields.io/github/stars/neomutt/neomutt.svg
	✓ github forks
		https://img.shields.io/github/forks/neomutt/neomutt.svg?style=social&label=Fork
		https://img.shields.io/github/forks/neomutt/neomutt.svg
	✗ github watchers
		https://img.shields.io/github/watchers/neomutt/neomutt.svg?style=social&label=Watch
		https://img.shields.io/github/watchers/neomutt/neomutt.svg
	✗ github issues
	✗ github license
packaging
	credit arch packager
		contact details
		update strategy (automatic)
	get homebrew package (for OSX)
convert config.h to version.c
	viable?
	sensible?
-UNKNOWN -> date in neo branch ONLY
	merge rules for neo branch
	arch/homebrew builds from git => always UNKNOWN
"merged" page/collection on website
	list of all features that have been accepted into the mainline
	currently empty
website gh page: doc [issue/*]
	temp fixes & wip for issues
use wiki for ideas -- survey of ideas (next week)
will I backport *new* features to 1.5.24?
	no
survey of patches -- both lists
	mutt -v | mutt survey@neomutt.org
update website gh page: list of branches
neomutt FAQ -- containing what?
Which languages *didn't* get updated for 1.6.0?
[bin] detached branch (or separate repo)
	separate repo (too much clutter)
	how much of my ~/bin is useful to others?
give package maintainers write access to [contrib/{DISTRO}]
	update as often as they like
	I'll merge just before a release
		need notification system -- "I am about to release"
Packages, get RPM spec, deb spec, gentoo, arch
	put in [contrib] for now
add my gpg signing key to neo.org, fc.org
test patches after multiple merge commits, i.e. test if these are equal:
	c1 + c2 + m1 + m2 + m3
	c1 + m1 + c2 + m2 + m3
	c1 + m1 + m2 + c2 + m3
	c1 + m1 + m2 + m3 + c2
tweak neomutt.git repo to prevent [flatcap/*] getting pushed to github
	how?
use links(1) as a model for re-architecting mutt
	mouse control (inc right-click)
	safe html rendering
	pop-up windows

icons for news:
	news: newspaper
	devel: jigsaw, spanner&screwdriver
	release: present, balloons

emails:
	workflow
	tackling the big issues (top down)
	tackling the small issues (bottom up)
	mutt patches survey
	decisions: things are discussed (to death) -- committee
		no leader, no outcome, no work

new hierarchy: tree => mail's parent is folder or mail

<sidebar-refresh> function to forcibly refresh screen & counts after, e.g.
	unmailboxes *
	mailboxes lots...

mutt patches survey -- on website home page and mutt home page

get travis to build RPMs on neomutt and deploy to github release's artifacts automatically
website front page: do YOU have a mutt patch? -> contact us
website collection of changes since last release -> relnotes on release
	note which branches, etc
website highlight section on toolbar (solid colour?)
strip .travis.yml from patches
drop flea and other mutt.org-related scripts

github files
	ISSUE_TEMPLATE.md
	PULL_REQUEST_TEMPLATE.md
	not case sensitive
	can be hidden in .github dir

homebrew inclusion requires:
	20 forks + 20 watchers + 50 stars
sb docs - explain why unsorted isn't
LMariachi -- sidebar format
config changes to README.sidebar
∀ new bugfixes -- reference trac number in commit message
test email reply to issues, etc
	markdown?

website: some bug-fixes have gone away -> success page?
set/unset sidebar_visible doesn't refresh screen when in pager
BUG sidebar redraws too often
sb doesn't match folder (for open) if it has a trailing /
test mailboxes with trailing '/' and '.', etc
sb folder sort: strcoll not strcasecmp?
sync sidebar divider docs

on hg-update
	pull hg changes into neo-tmp
	push to neomutt
	push to flatcap
	∀ features merge
	merge into neo too
on neo release -- ideas
	rebase all features onto default
	including neo?
	loses all semblance of history / continuity
	on every n^th release? / x months / new features -- rebase?

integrate scripting language
	lua, perl, python, ruby

notmuch missing entry in PATCHES
	(add to neomutt? or notmuch?)

survey -- autoreply

Mutt web DNSSEC, TLSA

mutt test framework
	how?

limit hg updates to just before release?
	no => often, let travis work

list-since script ∀ branches
	features, neomutt
	non-merge commits since last tag

config option:
	--enable-trash?
	--enable-fmemopen?

dev@neomutt.org -> recipients need auto bcc rule to copy other devs
dev account on server shared between devs?
notification email @neo.org shared to devs?

website
	manual -- expand sidebar optional features
	put our features in first
	list feature support by distro?

<sidebar-next-new> => $sidebar_flagged_are_new ?

sidebar refresh variable
	sidebar_refresh_when_hidden

mutt-kz check #ifdef patches for notmuch/sidebar separation

readme in copr repo
	put rpm build scripts in repo too

panels have dividers enum
	left
	right
	top
	bottom
	between
	outside
who owns the dividers space?
set_focus (panel)
	who owns the focus?
	gfx(curses)?
	get_char -> gfx_get_char -> consider focus
on close panel, focus moves to
	*prev*/next sibling, or parent?
	due to mutt's UI focus moves to prev sibling
how can I show focus without moving anything? i.e. borders
	sacrifice a top line?
	border highlight?  => always present
which panels *accept* focus?
	sidebar
	index window
	pager window
	<tab> to switch?
	or <left>, <right>?

mirror script, add copr, aur repos
show focus -- sacrifice help line?
	no, it's not always visible
propagation of notifications -- start @focus, work down
	SB, IW, PW + 'q' mail accepts, hides PW, PS, focus IW
	SB, IW + 'q' mail notified, rejects, global accepts, closes app
Help starts @focus, Panel Name + get_keys method
if sidebar is a separate panel and src file, should IW be?  PW?  AI?
If focus is on PW and SB, IW, PW are siblings, how can SB get notifications?
	or does mail Panel catch and iterate through children?
	SB mappings are (index,pager) => behaviour wanted but not in AW

delegation of keys -> focus() -> parent -> global, e.g. IW, Mail
	functions => components (e.g. mail)	}- mail_init() register_functions(); register_commands();
	commands => components			}

slang source + demos
	http://fossies.org/linux/misc/slang-2.3.0.tar.gz

sample mail repo filled with example/problem mailboxes

main.c:mutt_exit()
	who uses it?
	where did it come from?

[management]/bin
	sync.sh 6h cron script to sync mirrors
	sync needs ssh key
		external to script
		(document in header)
	sync reads data file with header, whitespace & comments

apply patch deltas to patch sets
	(changes since last sync)

notmuch buffy changes *force* sidebar
	need separating out

install neomutt in parallel with mutt
	uses alternatives mechanism
	=> /usr/bin/neomutt{,-2016MMDD}
	=> /usr/bin/mutt-1.6.1

COPR drop --debug

OS-specific build instructions / install

M_* -> MUTT_* pre-emptively commit to neomutt?

change repos' default branch to /readme?
	contains just some notes

muttrc.{distro} ∀ distros

kdave -> trac mailcap

spread out doc chapters so diff context is vague
	</sect1> and whitespace

list_pull_requests.sh
	get_pull_requests.sh
	reference local neomutt repo

new people => update neo main README.md

NeoMutt website top tips?

travis configure --quick-build -> [mutt/*] ?
	does quick-build -> all features should derive from it

where do debian bug-fixes go?
	[bug-fixes]?
	[debian]? => [gentoo], etc
	=> fixes might exist in multiple bug fix branches
	[bug/*] ?, e.g. [bug/debian]
	synchronise naming and commit messages of bugs
		if updated (externally) revert and new
		∀ branches
	msg:
		issue numbers across distros & mutt
		orig authors
		contrib authors
		orig source
	=> fixed order -- NOT good
	=> [bugs/*] mutable! -> lose history
	store bugs as commits or patches?
		patches -- easier to reorder & amend with history
		commits -- easier to manage, rebase

git merge attrs to automate merges
	publish

separate nntp and neo-nntp patches?
	docs, patches?

ntfs, linux-ntfs, ldm, ntfs/ldm faqs -> GH pages

bug-fixes(common) -> PATCHES
	add empty dir & readme (for now)

Milestones
	1 patch tree
	2 share patches
	3 rebase

issues
	patches order
	bug fixes (common)
	alternatives

forks of all distro repos

cond-date document date.sh generator

maintainers names to credits page

MORE news

keyword management == web intro

howto build neomutt page
	simple instructions
	expert instructions
	explain all build scripts, etc
	location of source / repo
	howto install
	distro pre-built installs

create empty (red-linked) pages on website, for people to write

bugs - doc in PATCHES
	=> revert old bug, add new bug
	to keep them atomic

hg/scripts make dev.mutt.org the upstream

list of to-be-written pages on web
	icons for level of completion

document quick-build option

Web Page (front) LATEST VERSION + links
	+ ChangeLog with links to commits?

cond-date script -> contrib

check which doc/contrib files distros install
	unify?

integration issues -> web devel news

[release/*] or [release] after [coverity] or
[merge] before [coverity] before [neomutt]

deprecate [issue/*] after 6 months?

neomutt-YYYYMMDD-dev (unstable release)?

filter travis out of merges

patches
	full credits
	description
	neo links to:
		repo
		proj
		commits?
		feature page

check what COPR installs
	docs/
	dupes + empty files!

lmdb header caching -> neo

notmuch: mx.c type in #endif IMAP

readme link neo to web, flatcap to gh

sidebar: sort out new vs unread vs old, etc

compose.c "sign as" + nntp + mbstowcs?

pull-hg-master -> darnir + repo?

announce pre-release in web news

alter notmuch to use keywords?

notmuch are tags persistant?
	if so, use keywords
	YES, but in notmuch db

upload all bin/ add (c) and licence

offlineimap tags -> X-Label, too?

new mail feat -> web

buffy_check tmp == M_NNTP / NOTMUCH

tie together bug reports for <enter> vs <return>
	https://dev.mutt.org/trac/ticket/3494
	http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=547661
	put metadata in [bugs]

doc rr-cache

list problem files
	PATCHES
	doc/manual.xml.head

GIT REPO?
	.gitattributes
		merging
		diff regexes
	doc my .gitconfig
	all bin/ to repo + .shell/bin/git

quick buid doc somewhere

patchset branch for COPR (neo + fedora)

COPR split up neo-patch, use integration patches

fix UNKNOWN in distro patches

sidebar, et al to kz
	add to "update-feature" txt

use issue "release" tag to mean
	bug         + release => fixed in next release
	enhancement + release => appears in next release
	put comment to same effect in issue

move [devel/*] to separate repo
	mutable repo
	neomutt should only move forward

Updates:
	docs -> web
	web credits
	web news
	management / travis
	patch tree diagram for gentoo

Release:
	old patches 1.5.24
	new patches 1.6.1
	unstable patches 1.6.1+
	devel patches
	readme: "patch against..."
	drop series: misleading
	readme - news?
	* 2
	individual patches
	rebased patches
	separate vs series
	readme ∀ dirs
	changelog

update feature =>
	commit
	backport
	integration/feature update
	changelog
	web pages
	doc/readme
	config

still to fix
	sidebar refresh
	compress - thorough testing

versions:
main (...)                 at main.c:1237
	old: 1.5.24 -- fixed + backports
	stable: 1.6.1 -- fixes + merges + dev
	unstable: 1.6.1 -- moving + dev

	v1.5.24/feature/*
	v1.5.24/neomutt
	issue/*
	mutt/*
	neomutt
	coverity
	feature/*
	devel/*

future version:
	v1.6.n/feature/*
	v1.6.n/neomutt

	unstable/feature/*	}- update occasionally
	unstable/neomutt	}  (after big arch changes)

branches
	features -> travis -> coverity -> neomutt
	feature5 -> travis5 -> neomutt5

[unstable/*] => drop [devel/win-sidebar]

new feature => new travis test
	compress
	nntp

update readmes
	wiki
	project links
	project contact
	version
version.c
	copyright
	contact
	version
doc.xml
	wiki
	project links
	project contact
	version
main readme
	project links
	project contact
	version
	list latest version?
		no, will always be out of date

Release issue for
	comments
	questions
	discussion
about current release
closed on next release
bugs as issues as normal

merging doc/manual.xml.head
	split head/tail
	2 * split (awk) by sect id=""
	source & new
	remerge alphabetically

split patches into main + custom
	e.g.
		index-color
		status-color
		status-color (index-color bits)

index_format
	clash using %g for notmuch and nntp
	init.h, hdrline.c

sort out notmuch/bugs overlap

integration web page
	state of play

create tests ∀ issues to prevent regressions
	HOW?

check makefile dist file list
	ChangeLog.neomutt, etc

put all the neomutt historic patches into [integration/patches]

bugs
	<enter> vs <return>
	backported (done)
	patchtree (todo)
main (...)                 at main.c:1237

test and compare:
	quilt
	stg
	topgit

in [integration/patches] generate directory READMEs
	automatic build from the patches in the dir
	autolink README.md to the dir.md's

win-sidebar - statusbar length/formatting broken when status_on_top set

labels:
	mail {red,green}
	complete works for r<tab> -> red
	doesn't work for g<tab>

add lmdb to neomutt-test-configs.sh

'uncolor status' doesn't work

dgc - unbind patch

neo-stats.pl
	ignore issues tagged 'release'
	ignore integration issues?
	or count only 'bugs' and unlabelled

use Gutenberg texts for sample emails
        use mutt-dev mailing list as a template?
        alias all names
        replace all message-ids (but keep links)
        strip out most headers

[issue/*] wait 2 releases, then drop?

s/1.5.24/1.6.1/g on website

make more patch tree features conditional

[unstable/*] or [devel/*] => broken refs => neo-devel repo?

Sidebar 'N' string for 'new' icon
        format with %1s for width

Milestones:
        use for next release
        => lots of smaller issues
        list (next) Milestone (at least) on web front page / devel page

add tutorials (like sidebar intro) to the website
	redlink some empty ones (or partials)
	ask for translations?

sb fill empty space -> mutt_paddstr
	no point, it just does multiple addch(' ')
	alloc buffer (on stack)
	memset to ' ', null at width, addstr()

integrate issues + mutt + ghi -> labels, saved-replies, etc

Mutt config generator app
	or good (curated) sample config
	tutorial
	translations

get opsec (Kurt) to help bapt (Baptiste) with bsd-neomutt

document branches
	mutt/default		only merges + travis
	mutt/default-clean	direct from upstream
		maintain this?
		publish this?
	unstable/sidebar	sidebar_on_right, WIPs, etc

new-commits.sh
	for i in $(git branch --no-merged | cut -b3- | grep feature/); do echo $i; git log --oneline neomutt..$i | indent; done

use git attributes to mess with [issue/*] travis.yml
	=> .gitattributes needs to be in repos on travis

backport features

make github neo description longer
	limited to 347 chars (visible)
	excluding www

plan gh repo rearrange
	pre-merge -> travis -> coverity -> neomutt
	hotfix branch included?
		where in layout?

mutt-kz rebase urgently needed

inotify ∀ local mailboxes

script to generate min-build
	put in contrib?
	check config is still up-to-date

mailing list?
	need forum
	announce tag on issues?

sample IMAP folder (for devs)
	regenerate daily

neo-build
	use git config for settings
		enabled/disabled by default
		configure settings
	save config.h, etc in .git/neobuild
	neobuild --generate

mail sieve issue -- colour code for origin?

sidebar_width in compose.c (gentoo)!

sidebar rename delim_len to div_width

PATCHES  -UNKNOWN -> -git?

docs for new sidebar expando %n
	push to upstream

git tag for issues matching rolling release

git users: priority workaround/fix

teams for @mentions
	@debian
	@rolling-release
	etc

patch-tree
	build every patch
	need tree of commit hashes

new travis => complete neo5 build

[neomutt] as temporary rolling release destination
	accidentally closing issues!

freebsd
	warning about mktemp
	dubious patch Makefile.am.doc

issue colour for VOTE or coopt QUESTION?
	/cc @neomutt

link kz smime issue to neomutt 

adopt mutt-dev trash changes

lmdb => new neobuild travis?

clang all my code + fix warnings

[travis] build script & data external to code branches

think of methods to reduce the churn in [patch-sets]

server script to update from hg
	get latest id
	hg id -i --rev stable
	hg id -i --rev default
	then update and check ids
	merge, push and travis

cron (locally) to fetch github into neomutt.git

fix notmuch Makefile.am

feature lmdb
	docs -> web

report-neo-bug.sh?
	show os
	build options
	etc

last-release tag?
current-release tag?
	useful, but problem NOT pushing them upstream

 __  __  ___ _____ _____ ___  
|  \/  |/ _ \_   _|_   _/ _ \ 
| |\/| | | | || |   | || | | |
| |  | | |_| || |   | || |_| |
|_|  |_|\___/ |_|   |_| \___/ 

patch -UNKNOWN -> -git

warning mx_is_notmuch undeclared in patch-sets

make a list of commits that are missing in the patch-sets
	quickbuild
	del .hg*, etc
	X, Revert X
Tag the missing commits [no export] ?

git log neomutt..feature/X
	new commits

get Karel to migrate to NeoMutt stack -- easier integration

split up neo custom patches (theme)
	not in Debian, Suse, Gentoo?

upstream tag for issues
	=> upstream notified?
	=> upstream accepted?

debian neomutt -- /etc/alternatives?

MOVE gentoo's TINFO patch into bug-fixes (for all distros)

