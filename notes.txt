ellipsis
	mutt_error
	mutt_message
	mutt_debug

#defines → enums?

make AUTHORS -- which repo did this?

Ultrix dead '95
	ask debian devs for list of working arches

init all vars
lots of static fns → _fn_name?
^L in source
Doxygen comments

strict compilation flags; c++ compiler?
unnamed args in function prototypes
spurious \ line endings (in middle of if!)

────────────────────────────────────────────────────────────────────────────────

Notifications

Window changes
	hidden	no params
	visible	rect
	resize	rect
	focus	in/out
colours changes
keypress	key, no params
config change	key, value
		ALL, no params
mail status change
	read/unread/flagged/deleted/edited
	MESSAGE_ID, flags
mailbox change
	new/deleted
	new mail, deleted mail, flagged mail, etc
connection status
	connected
	disconnected
startup
quitting - any use to anyone?
selected mail changed
selected mailbox changed

wrapping →
	extra char at beginning of line "+"
	extra char at end of line "<-/"
wrap at:
	char
	word (whitespace)
	clause (punctuation)
	sentence (.!?)
No wrap →
	extra char at end of line ">"

────────────────────────────────────────────────────────────────────────────────

send escape sequence to clear terminal title when mutt closes
init.h struct option_t needs enums for types and union for data
timer notifications, e.g.
	highlight something for three seconds, then return to normal
https://github.com/N8Fear/mutt-kz
	some initialisations improvements
	some bug fixes

sidebar_dividers
	first (wide) character is vertical divider
		between sidebar and index/pager
	second (wide) character is horizontal divider
		between different mailboxes (within the sidebar)

need attention
	draw_sidebar
	OPTSIDEBARSORT
		sorts by real path, not visible name

check for unused #include
sort includes <>, ""

sort init.h, globals.h, etc

kill one-line if's:
	if (adsfa) command;

~50 lines of commented out source
	/* ... ; */

possible to fix sidebar sort order to respect hierarchy/indentation?

sidebar_width = auto (size to contents)
	would need to parse and format all strings ahead of drawing divider

cleanup:
	docs - in code and html
	comments
	whitespace
		unfold lines
		indent
		rebracket
		refold
	sort options in
		init.h
		globals.h
		functions.h
		switches
	doc switch drop-throughs

sorting
	if displaying full paths:
		sort by display name
		sort by underlying name
	if displaying indented paths:
		sort by top-level names, then children

New only -- include structure (empty dirs) to keep hierarchy
	mail (0)
	  fruit (0)
	    apple (1)

trim trailing slash from mailboxes, folder
	shouldn't be displayed

check all headers #include requisites for compilation

while(1), rather than FOREVER

sb_set_curbuffy
sb_set_buffystats
	should probably both return BOOL on success/failure

sb_draw should return success of drawing
	possible given all the callbacks, etc?

quiet config option -- don't whine about unknown config options
	or quiet command line option

sensible retvals on functions

────────────────────────────────────────────────────────────────────────────────
missing patches
	lightweight

DBUS plugin -- to do what?
	notify out
	take input to do what?
		accept mailto: links

repaint if:
	size changes
	position changes

Changed posn notification ONLY
	e.g. sidebar has swapped sides
could imply that cached data may be OK to reuse
	e.g. don't need to call calc_boundaries

Notify (Box*, Rect old, Rect new, flags)
Flags:
	too small to render
	changed visibility

────────────────────────────────────────────────────────────────────────────────

Sidebar actions (that might precipitate change):
	line-up
	line-down
	page-up
	page-down
	set buffy from browser
	change sort order
	add mailbox
	delete mailbox
	change mailbox's sort criteria (e.g. flag an email, a flagged-sorted mailbox)
	resize window
	hide sidebar
	show sidebar
	open folder

────────────────────────────────────────────────────────────────────────────────

draw sidebar
	assumes position/size
	move due to STATUSONTOP, HELP
	check of show/hidden has changed & refresh numbers if nec
	if hidden, do nothing
	sanity check settings
	draw divider (3 chars!)
for all buffers
	set colour
	move
	gen displayname (need to cache this)
		name, bytelen, screenlen
		what about config changes
			including sort order
	make sidebar_entry
fill remaining lines with blanks

Start; Incoming; Inbox open; current = Incoming; sort → cur is offscreen, boundaries lost

────────────────────────────────────────────────────────────────────────────────

tree chars for sidebar hierarchy?

parse_mailboxes -> notify sidebar => know if anything's invalidated TBCH
can I use realpath(), mutt_expand_path() for anything?

Unmailbox * ⇒  many notifications followed by ONE redraw

can the real status bar display any sidebar fields?
	why not?
	how can they be integrated?

most options are "short" limited to +/- 32767
mutt-sidebar.vim (contrib dir?)
set/unset/toggle?  invVARNAME
option - don't sort inbox -- defined how?
separate modules -- sidebar, index, pager, help? -- each with
	init()
	notify()
	close()
	config()
sidebar_wrap=search,motion (separate bools for simplicity?)

sidebar_sort is an enum - on set error, it could show the valid values
quadopt can give help too -- important since varname gives no clue about type
break up init.h, globals.h, functions.h
	init.h option DELEGATE, prefix "sidebar_", callback?
init() on module calls add_options()
	=> sb_opts refer to sb-private vars in sidebar.c
option breakup depends on lots of notifications
Where are OPTSIDEBAR* used outside sidebar.c
	curs_main.c, buffy.c, mh.c
any use from calling sb_init(), sb_shutdown() from main()?
	probably not yet
Distinguish between movement and search wrap?
	movement - next/prev (1 line), page up/down
	search - find next/prev new
does imap folder add/rm trigger our sb_notify?
Config change notifications
	fn (name, old_val, new_val)
how would function delegation work?
	init() -> add_functions (name, callback)
	the callbacks would need to be able to manipulate mutt objects
Register functions & callback
make sure anything we need is exposed
if we hide our globals, give then all accessor functions get/set_VAR()
init would need to register new sort methods

demo setup - lots of files in:
	local mbox
	local mh dirs
	IMAP mbox
	IMAP mh dirs
	POP mbox
	POP mh dirs

sidebar expandos
	%c number of non-deleted emails (total - deleted)
	%s = %c? (lower case version of %S?)

alternative to lightweight patch
	don't update info ∀ BUFFYs
	just update the current page
	only update lists when the user OPENs a folder
	not when they move the highlight
	could pre-emptively populate the previous/next pages

simpler way to generate graphs?
git log --format="h_%h h_%p %D" --branches --simplify-by-decoration

postpone patch doesn't quite work
	1) The PostContext and menu are private, so sidebar can't tell that
	   we're looking at the postponed list after navigation.
	2) After navigating to another folder, you still have to "quit" to
	   get the display to refresh.

sb expandos
	compare letters to status_format letters
	deleted?
	number after limiting
	unread?

notmuch
	add new virtual folders to sidebar
		automatically?
	what name should it be given?
		automatic?
			allow user rename?
		ask user?
	how can we make them persistant?

Where does getchar() get called?  can I centralise them?
Does getchar() wait or poll?  Need it to poll
Polling -> Idle -> Event callback that I can use to populate BUFFYs
sidebar needs NO-selection possibility for toggle-virtual
need to clear index on Toggle-Virtual

sb extra colours for:
	readonly mailboxes
		expando?
	bad (non-existent) mailboxes
		expando?
	virtual mailboxes
	what other attrs?
	colour by SRC
	separate colour schemes by SRC?

integrate nntp into sidebar
what does notmuch return?
	how do i link it to existing objects?

Undo, what's possible?
	Last action?
	Many actions?
persistant undo on email editing?
undelete?
unsend?
tagging?

signature manager
disposable email address plugin?
	need external API to send/receive

all patches
	PATCHES
	configure
	USE_X
	default configured off

Alternate views in the sidebar
	need toggle function
	imap: folders  <--> dir tree
	local: folders <--> dir browser

	address book? -- different grouping/hierarchy?
	calendar? -- different timescales?
	news?  subscribed   <--> all groups
	rss?   unread feeds <--> all feeds

data source LDAP

which config items require frequent and costly interpretation?
	all format strings -- every line, every refresh

keep revision number for all config items (as a prelude to proper notifications)
	only increment revision number on change
	leads to possible A-B-A problem (change blindness)
	if (ver(format_str) > old_ver) STMT;
	allows code to make informed decisions about caching

cache for formatted strings?
	too much can change
		index: flags, folded-ness
		sidebar: all numbers => cache invalid

index format -- full directory mode
	show unix perms like ls
	user/group/etc
	too specific?
	what about other OSs?

refer to and compare config names by hash only?
	save lots of string compares
	gperf to generate perfect hashes

cache sidebar formatted strings on BUFFY object?

what are the objects in the Index?
	cache the index formatted strings on them

introduce new format strings
	index_rich_format

break up and rewrite mutt docs
	break into smaller sections
	separate mutt-doc repo
	translate sections (default to english if missing)

code: switch default must be at end
mutt folder/dir browser
	".."/open should start with current folder/dir selected
	display full path at top of screen/statusbar/titlebar
BOOL -> enum?  what about the bitfields?

git
	document git attributes for PATCHES
	create git diff regex for manual.xml to identify the section where the changes occurred
		grep "<sect[0-9] " manual.xml.head
		need to look for <sect> <chapter> <table> <example>
	check the default 'c' git diff regex against sidebar.c
		check C function
		check C struct/enum

compare conditional builds
	#ifdef
	+/- FEATURE
	configure.ac
	Makefile.am
	compress.c always compiled in?
	nntp.c always compiled in?

regex/regexp pick one in code/docs
	manual.xml
		regexp 65
		regex 7
	*.[ch]
		regexp 48
		regex 25

Generated muttrc is an encyclopaedia
Supplied  muttrc is a guide for dummies

Set out notification emails as a nested set:
	Announcement = neomutt description, list of features, links
		Feature X - feature desc, credits, list of files changed, links
		Feature Y - ditto
		Feature Z - ditto
	allowing people to criticise each component individually

docs/muttrc/readme/init.h
	need to document default values for variables

mutt bug - mail isn't from me when it's from
	jimrich@flatcap.org
	bobrich@flatcap.org

index_color should apply to status_bar when viewing mail
status_color should apply to mid-status_bar when (pager_index_lines > 0)
shouldn't be affected by 'status_on_top' either

cond-date
	all,dates,are,broken@ 1y -> this year (not 12 months)
		1w -> this week (not 7 days)
		if the dates were sensible (7d = 7 days back from now)
		they'd tie in with ~d, e.g.
			color index color237 default "~d>30d"         # Over a month old
		reuse the ~d code
			pattern.c:eat_date()

replace " with ' in muttrc

auto-generate merge commit messages
	modified git log msg
	script for authors
	commented out - but accessible?

git hook variables
	prepare-commit-msg
	GIT_DIR
	GIT_WORK_TREE
	GIT_INDEX_FILE
	GIT_PREFIX
	GITHEAD_XXX

use PATCHES to show bugfixes?
	bugfixes:
		bug1
		bug2
		...
	patch-xxx
	patch-yyy
or
	bugfix1
	bugfix2
	patch-xxx
	patch-yyy

minors - comments for any full functions
	ifdef, index-color, progree, status-color, trash

notmuch - fix dependencies
check minors for () -> (void)

should static functions be called mutt_*?
check minor new functions are static

tidy - check files for leading/trailing whitespace at ends of file
	check for redundant empty lines

community script check for update
	date community docs?
	or just rely on commit date?
git jump function -- figure out if diff or merge is needed

docs
	add tests.txt
	todo list of ideas

use sort_aux for nested sidebar names?
	no, sub-folders are same type?
		no
	YES: allows to sort by name, then subsort by new-count
	separate variable otherwise it interferes with index, etc

kz issues -- which apply to me?
docs refer to alias menu but don't mention how to invoke it
browser
	can sort my num new msg, but can't display count itself
	sort needs docs -> promote to feature?
		check kz for docs/examples
	%n isn't representative of "all message count"
		doc as (N)umber of messages, or
		%c message (C)ount

do format conditional work on strings, etc?  meaningful?
	empty => false

change docs to use <example>

cond-date needs some concrete examples

source command -- allow wildcards
	fits in nicely with ifndef
	or 'source_dir' command to read all contents
	or "source dir" to read all contents
	recursive option?
	recursive by default?

manual "variables" need description field

'c' fails if dir has trailing /
	e.g. when you use <tab> to complete!
'c' to open fails, test cmdline open too
	check sidebar displays correct highlight/open

changes to css must set both fg, bg
	cf <note>
	reduce colour of <command>s too

separate draw() in sidebar for
	emails
	notmuch
	nntp
	addressbook?

sidebar indented folders
	fill in gaps in hierarchy automatically
	make them non-selectable (unless the user has "mailboxes" them)
	alternatively, have some way to mark mailboxes as "fake"
		probably a horrible idea

neomutt motto?
	integrate it first
	decide whether to keep it later
	We accept! (patches)
	If we take your patch, you are responsible for fixing it

BUG: sidebar gives OPEN highlight even if the opening failed
	e.g. bad mailbox

enumerate changes to manual.xml.head
	split up?
	how?

attach sets of keybindings to panel hierarchy?
modify docs generation to process commands' comments
can some keybindings be set "only active when window is visible"?
	=> help doesn't (necessarily) hide sidebar
		should sidebar keys work?  probably not
	*should* help hide the sidebar?
		probably yes

how should mutt_yesorno() work?
	Question is asked modally & outside area of asker
	=> hide command line, show question
	question panel gets request, shows itself, hides command
		make command-line panel invisible?
		make question panel higher in z-order?
			=> they are coincident

how about modal dialogs?
	1 dialog could invalidate sidebar, index, pager
	sibling to sidebar, index, pager but last in list (z-order)
	sb, index, panel get painted, then "floating" window gets painted over
	modal => disable key mappings/propagation

what does Sidebar *really* need?
	Incoming BUFFY -> notifications of BUFFY changes
	Panel (geometry) -> notifications of WINCH
	character libraries -> lengths, widths, formatting, etc
	options (config access)
	colours
	curses: clear(panel), clear(line), write (char/string), move(x,y)
		curses calls are all (0,0)-based
		curses takes panel object and converts to screen coordinates
		∀ users
	callbacks for functions
	sb is initialised with (Panel pointer), notifications on change
	can query Panel's size, position (not useful), visibility
	panel can be visible, but !active, e.g. partially under a modal dialog
		=> paint if asked, but won't receive keys
		could still be asked to do stuff by dialog, etc

XXX in new features

lots of preprocessor symbols that use #if on undefined symbols
	warning: "DEBUG" is not defined [-Wundef]
	warning: "HAVE_DB4" is not defined [-Wundef]
	warning: "HAVE_GDBM" is not defined [-Wundef]
	warning: "HAVE_QDBM" is not defined [-Wundef]
	warning: "SYS_SIGLIST_DECLARED" is not defined [-Wundef]
	warning: "USE_UNLOCKED_IO" is not defined [-Wundef]
	warning: "_STRING_ARCH_unaligned" is not defined [-Wundef]
	warning: "__alpha" is not defined [-Wundef]
	warning: "__sun__" is not defined [-Wundef]

find untranslated strings, i.e. missing _()
	mutt -v output is missing some

kill version.c:rstrip_in_place()
	fix external build scripts

vim library of config options(vars)
	auto-extract from init.h

sensible-browser-position only sensible for sort=alpha or unsorted
	what else?

fix brain-damaged dprint
	macro redirect
	dprint(X, (a,b,c))!
	debugfile tested even if not used
	move all tests into mutt_debug

rewrite mutt_wstr_trunc()
	first, rename variables to be something sensible
	second, refactor to be legible

diagram
	git branch for labels
	git tag for labels
	git log ∀ commits sorting my hash
	stop @ m24
	for each branch/tqag recursively backtrack
	or recursively delete starting at cutoff (m24)
	commits may be older, but they won't be in the past history
	first pass of remainder - first parent only - mark merges
	neomutt special case: cartouche of uniq icons + yellow neo (non-merges)
		=> icons for Sidebar and NotMuch (or capital letters: S, N)
		what about NNTP?  Compress?
	label merges with [M]?

macros() should be MACROS()

smime.c:
	variable set to NULL after safe_fclose
	safe_fclose (&smimeout);
	smimeout = NULL;

check everyone's using safe_fopen(), safe_fclose(), etc

rename safe_X(**ptr) to X_null?
	safe_free -> free_null (**ptr)
		-> free_n ()
		-> n_free ()
		-> free_and_null ()

change prototypes for the X_and_NULL macros
	free() doesn't take a double pointer, so
	FREE() shouldn't
	rule of least surprise

try to reduce the scope of all variables
	too many variables are declared at the start of a function
	when they only get used in an if/for/while loop

#define mutt_new_header() safe_calloc (1, sizeof (HEADER))
	et al ought to cast their returns to the correct type

lots of pointers being assiged to 0
	unsigned char *pending_exact = 0;
        should be NULL

kdave - limit-current-thread
	alt-l (show limit) should respond "limit thread"
	is "limit ." the same as "limit all" -- YES
		fixed internally
	create unlimit patch and pull-request for kdave?
	limit doesn't have any context, just a pattern
	limit-current-thread NEEDS to know current email
	it'd be nice to change limit to accept another "string" arg
	currently
		"all" -> "~A"
	change limit
		"thread" -> "~a" (only letter available)
		let general limit machinery do the work
	unfortunately they can't see the current email

save email doesn't respect the umask
vimlocal - check .git dir -- safe from git clean!

merge commits contains: "Closes #1234" to perform auto-close pull-request/issue
wiki coding style:
	indent, {}s, ()s, function defs, examples of correct

integrate patchlist into new version of ifdef checking
wiki: doc travis and coverity options
missing qdbm, slang-dev
split source?
	tools/ - standalone exes
	library/ - replacement library functions
	readme/ - obvious

mail, compress, dev build patches, examine coverity build log
gh-pages for up-to-date manual (in sections)
	front redirects to wiki

fmemopen - merge into one place in mutt_mktemp()?
	idea from dgc email
rebase and refactor [devel/*] before moving to [feature/*]
	factor this description into new-feature txt
sidebar, when saving email to a folder use the sidebar as a selector?
	new indicator colour or prompts "select save folder" + normal highlight
mass IRC dev chat (invitees can speak) others can watch
	need agenda to keep to topic
join mutt-users and ask both lists what patches/version they're using
	send me your "mutt -v"
	any security risk to this information?
	OS info useful too
Do drafts *need* to be stored in a separate folder?
	why not inline?
	in threaded order
	just tagged or coloured
	status flag to denote draft
mailing lists
	announce	2984
	users		1307
	dev		538
email David Sterba (kdave) -- limit
	use context, or change prototypes
screenshots on website
watchers/stars on website home page
	neomutt version
shields.io
	✓ travis build (general)
	✗ travis build (branch)
	✓ coverity
	✗ github downloads
	✗ github tags
	✓ github release
	? github commits
	✓ github stars
		https://img.shields.io/github/stars/neomutt/neomutt.svg?style=social&label=Star
		https://img.shields.io/github/stars/neomutt/neomutt.svg
	✓ github forks
		https://img.shields.io/github/forks/neomutt/neomutt.svg?style=social&label=Fork
		https://img.shields.io/github/forks/neomutt/neomutt.svg
	✗ github watchers
		https://img.shields.io/github/watchers/neomutt/neomutt.svg?style=social&label=Watch
		https://img.shields.io/github/watchers/neomutt/neomutt.svg
	✗ github issues
	✗ github license

packaging
	credit arch packager
		contact details
		update strategy (automatic)
	get homebrew package (for OSX)
convert config.h to version.c
	viable?
	sensible?
"merged" page/collection on website
	list of all features that have been accepted into the mainline
	currently empty
website gh page: doc [issue/*]
	temp fixes & wip for issues
survey of patches -- both lists
	mutt -v | mutt survey@neomutt.org
update website gh page: list of branches
neomutt FAQ -- containing what?
Which languages *didn't* get updated for 1.6.0?
[bin] detached branch (or separate repo)
	separate repo (too much clutter)
	how much of my ~/bin is useful to others?
give package maintainers write access to [contrib/{DISTRO}]
	update as often as they like
	I'll merge just before a release
		need notification system -- "I am about to release"
Packages, get RPM spec, deb spec, gentoo, arch
	put in [contrib] for now
add my gpg signing key to neo.org, fc.org
tweak neomutt.git repo to prevent [flatcap/*] getting pushed to github
	how?
use links(1) as a model for re-architecting mutt
	mouse control (inc right-click)
	safe html rendering
	pop-up windows

icons for news:
	news: newspaper
	devel: jigsaw, spanner&screwdriver
	release: present, balloons

emails:
	workflow
	tackling the big issues (top down)
	tackling the small issues (bottom up)
	mutt patches survey
	decisions: things are discussed (to death) -- committee
		no leader, no outcome, no work

new hierarchy: tree => mail's parent is folder or mail

<sidebar-refresh> function to forcibly refresh screen & counts after, e.g.
	unmailboxes *
	mailboxes lots...

get travis to build RPMs on neomutt and deploy to github release's artifacts automatically
website front page: do YOU have a mutt patch? -> contact us
website collection of changes since last release -> relnotes on release
	note which branches, etc
website highlight section on toolbar (solid colour?)
strip .travis.yml from patches
drop flea and other mutt.org-related scripts

github files
	ISSUE_TEMPLATE.md
	PULL_REQUEST_TEMPLATE.md
	not case sensitive
	can be hidden in .github dir

∀ new bugfixes -- reference trac number in commit message
test email reply to issues, etc
	markdown?

website: some bug-fixes have gone away -> success page?
set/unset sidebar_visible doesn't refresh screen when in pager
sb doesn't match folder (for open) if it has a trailing /

on hg-update
	pull hg changes into neo-tmp
	push to neomutt
	push to flatcap
	∀ features merge
	merge into neo too
on neo release -- ideas
	rebase all features onto default
	including neo?
	loses all semblance of history / continuity
	on every n^th release? / x months / new features -- rebase?

notmuch missing entry in PATCHES
	(add to neomutt? or notmuch?)

list-since script ∀ branches
	features, neomutt
	non-merge commits since last tag

<sidebar-next-new> => $sidebar_flagged_are_new ?

sidebar refresh variable
	sidebar_refresh_when_hidden

panels have dividers enum
	left
	right
	top
	bottom
	between
	outside
who owns the dividers space?
set_focus (panel)
	who owns the focus?
	gfx(curses)?
	get_char -> gfx_get_char -> consider focus
on close panel, focus moves to
	*prev*/next sibling, or parent?
	due to mutt's UI focus moves to prev sibling
how can I show focus without moving anything? i.e. borders
	sacrifice a top line?
	border highlight?  => always present
which panels *accept* focus?
	sidebar
	index window
	pager window
	<tab> to switch?
	or <left>, <right>?

mirror script, add copr, aur repos
show focus -- sacrifice help line?
	no, it's not always visible
propagation of notifications -- start @focus, work down
	SB, IW, PW + 'q' mail accepts, hides PW, PS, focus IW
	SB, IW + 'q' mail notified, rejects, global accepts, closes app
Help starts @focus, Panel Name + get_keys method
if sidebar is a separate panel and src file, should IW be?  PW?  AI?
If focus is on PW and SB, IW, PW are siblings, how can SB get notifications?
	or does mail Panel catch and iterate through children?
	SB mappings are (index,pager) => behaviour wanted but not in AW

delegation of keys -> focus() -> parent -> global, e.g. IW, Mail
	functions => components (e.g. mail)	}- mail_init() register_functions(); register_commands();
	commands => components			}

slang source + demos
	http://fossies.org/linux/misc/slang-2.3.0.tar.gz

sample mail repo filled with example/problem mailboxes

[management]/bin
	sync.sh 6h cron script to sync mirrors
	sync needs ssh key
		external to script
		(document in header)
	sync reads data file with header, whitespace & comments

install neomutt in parallel with mutt
	uses alternatives mechanism
	=> /usr/bin/neomutt{,-2016MMDD}
	=> /usr/bin/mutt-1.6.1

change repos' default branch to /readme?
	contains just some notes

muttrc.{distro} ∀ distros

list_pull_requests.sh
	get_pull_requests.sh
	reference local neomutt repo

NeoMutt website top tips?

travis configure --quick-build -> [mutt/*] ?
	does quick-build -> all features should derive from it

where do debian bug-fixes go?
	[bug-fixes]?
	[debian]? => [gentoo], etc
	=> fixes might exist in multiple bug fix branches
	[bug/*] ?, e.g. [bug/debian]
	synchronise naming and commit messages of bugs
		if updated (externally) revert and new
		∀ branches
	msg:
		issue numbers across distros & mutt
		orig authors
		contrib authors
		orig source
	=> fixed order -- NOT good
	=> [bugs/*] mutable! -> lose history
	store bugs as commits or patches?
		patches -- easier to reorder & amend with history
		commits -- easier to manage, rebase

git merge attrs to automate merges
	publish

separate nntp and neo-nntp patches?
	docs, patches?

forks of all distro repos

cond-date document date.sh generator

maintainers names to credits page

MORE news

keyword management == web intro

howto build neomutt page
	simple instructions
	expert instructions
	explain all build scripts, etc
	location of source / repo
	howto install
	distro pre-built installs

create empty (red-linked) pages on website, for people to write

bugs - doc in PATCHES
	=> revert old bug, add new bug
	to keep them atomic

list of to-be-written pages on web
	icons for level of completion

Web Page (front) LATEST VERSION + links
	+ ChangeLog with links to commits?

cond-date script -> contrib

alter notmuch to use keywords?

notmuch are tags persistant?
	if so, use keywords
	YES, but in notmuch db

upload all bin/ add (c) and licence

offlineimap tags -> X-Label, too?

buffy_check tmp == M_NNTP / NOTMUCH

doc rr-cache

GIT REPO?
	.gitattributes
		merging
		diff regexes
	doc my .gitconfig
	all bin/ to repo + .shell/bin/git

use issue "release" tag to mean
	bug         + release => fixed in next release
	enhancement + release => appears in next release
	put comment to same effect in issue

new feature => new travis test
	compress
	nntp

update readmes
	wiki
	project links
	project contact
	version
version.c
	copyright
	contact
	version
main readme
	project links
	project contact
	version
	list latest version?
		no, will always be out of date

Release issue for
	comments
	questions
	discussion
about current release
closed on next release
bugs as issues as normal

merging doc/manual.xml.head
	split head/tail
	2 * split (awk) by sect id=""
	source & new
	remerge alphabetically

split patches into main + custom
	e.g.
		index-color
		status-color
		status-color (index-color bits)

check makefile dist file list
	ChangeLog.neomutt, etc

labels:
	mail {red,green}
	complete works for r<tab> -> red
	doesn't work for g<tab>

'uncolor status' doesn't work

dgc - unbind patch

neo-stats.pl
	ignore issues tagged 'release'
	ignore integration issues?
	or count only 'bugs' and unlabelled

use Gutenberg texts for sample emails
        use mutt-dev mailing list as a template?
        alias all names
        replace all message-ids (but keep links)
        strip out most headers

make more features conditional

Milestones:
        use for next release
        => lots of smaller issues
        list (next) Milestone (at least) on web front page / devel page

add tutorials (like sidebar intro) to the website
	redlink some empty ones (or partials)
	ask for translations?

sb fill empty space -> mutt_paddstr
	no point, it just does multiple addch(' ')
	alloc buffer (on stack)
	memset to ' ', null at width, addstr()

integrate issues + mutt + ghi -> labels, saved-replies, etc

Mutt config generator app
	or good (curated) sample config
	tutorial
	translations

make github neo description longer
	limited to 347 chars (visible)
	excluding www

inotify ∀ local mailboxes

script to generate min-build
	put in contrib?
	check config is still up-to-date

sample IMAP folder (for devs)
	regenerate daily

neo-build
	use git config for settings
		enabled/disabled by default
		configure settings
	save config.h, etc in .git/neobuild
	neobuild --generate

mail sieve issue -- colour code for origin?

teams for @mentions
	@debian
	@rolling-release
	etc

freebsd
	warning about mktemp
	dubious patch Makefile.am.doc

issue colour for VOTE or coopt QUESTION?
	/cc @neomutt

link kz smime issue to neomutt

clang all my code + fix warnings

server script to update from hg
	get latest id
	hg id -i --rev stable
	hg id -i --rev default
	then update and check ids
	merge, push and travis

cron (locally) to fetch github into neomutt.git

report-neo-bug.sh?
	show os
	build options
	etc

upstream tag for issues
	=> upstream notified?
	=> upstream accepted?

24-bit colour => non-curses back-end
	enumerate all the curses things we do
	get screen size
	listen for screen size changes (WINCH?)
	wait for key presses
	clear screen
	clear line
	write text

doc changes/todo list for limit-current-thread

sidebar-refresh command to forcibly update ALL the counts?

sidebar search command to quickly change to a mailbox
	like vim highlight search?
	filter after every keystroke

revert sidebar cursor positioning?
	no longer needed now that sidebar isn't drawn during key-waits

new-mail => dbus as a goal, see dgc

'ifdef' improvement
	ability to check mutt version number
	ifdef VERSION == X
	ifdef VERSION > Y
	like vim

macro instruction <no-history> like vim's <silent>
	some macros end up in the log

firstb <REGEX>
	regex if it contains a '*'
	anchored at bol?
	multiple args => not regex
	one arg => git checkout -- no sense in that

update-from-hg.sh
	-n option => no push to github

git clone
	always pull in my prepare-commit-msg hook
	(disabled)
	what other defaults?

mutt plugin to create neomutt issues
	use ghi?
	or GitHub API directly
	test in dummy repo

git b(){} needs to disable colour on piping

generate integration checkpoints.md using git log:
	git log --reverse --no-merges --oneline \
		^bugs/common ^bugs/neomutt ^contrib/keybase ^contrib/vim-keybindings \
		^feature/compress ^feature/cond-date ^feature/fmemopen ^feature/ifdef \
		^feature/index-color ^feature/initials ^feature/keywords \
		^feature/limit-current-thread ^feature/lmdb ^feature/nested-if \
		^feature/new-mail ^feature/nntp ^feature/notmuch ^feature/progress \
		^feature/quasi-delete ^feature/sidebar ^feature/skip-quoted \
		^feature/smime-encrypt-self ^feature/status-color ^feature/tls-sni \
		^feature/trash ^mutt/default ^mutt/stable \
		neomutt
	etc for all branches

sidebar
	option to fold nested mailboxes
	option to unfold when new mail arrives
	folded, they should show the cumulative totals for all the children

"build -n" disable neomutt features

mutt tips on startup
	distribute a contrib/mutt-tips dir which is a mailbox
	select a random (email/tip) from the list
	pick one that's unread (preferably)
	how can we preserve the "read-ness" of an email after a package update?
	.mutt.top-tips ? -- save a list of message-ids in there?
	<top-tips> command creates a new mailbox (from DATA_DIR/DOC_DIR)
		if in /usr it would be read-only
		need to store flags elsewhere
		flags: read, flagged!, deleted (i.e. don't show me again)
	intersperse with mailboxes commands
	tips should be self-contained (to start with)
		unless they reference old tips
		nested emails?  what about multiple inheritance?
		need hyperlinking "see also" links
	use labels (from Keywords plugin) to add value
	use mutt's caching facility to store the metadata

sidebar
	have an alternate mailbox like vim's alternate file
	create an alias for it '#'
	c# -> change to alternate directory
		new alternate becomes old dir
	save files to #
	set alternate mailbox function
	colour highlight for alternate mailbox
	expando %# for alternate displays '#' or ''

sidebar
	separate colour for read-only mailbox
	expando for read-only mailbox

getopt for neomutt
	--help
	--version

symlink man pages, etc (for ease of use)
	neomutt -> mutt

transition guide:
	man neomutt
	a guide for users of mutt moving to neomutt

index-color
	patterns on date
	allow unescaped ANSI sequences?
	add offset based pattern, e.g.
		color red default cols:14-20 [mutt pattern]

doc -> contrib ∀ vimrc, muttrc
	=> will break downstream packaging
	announce change, make change in next release

2016-08-09
	01:35 <SvenG> but giving a color to "known" addresses (via aliases) would be a killer

2016-08-12
	08:31 <flip214> Hi. Another thing I would love to see: an email arrives in INBOX; I answer it,
		and define the FCC for the sent mail, but the incoming mail is still in INBOX.
		so a "reply-and-move-to-same-folder" would be interesting to me.

sidebar "live" search of folders
	key to start searching
	live filtering at every keystroke
	enter selects
	Ctrl-C / Ctrl-G aborts
	fuzzy matching
matching applies to multiple areas of mutt
	sidebar
	aliases
	folders
	files
	index panel
	pgp keys
good feature to sell upstream

alternative to sb search
	key -> numeric prefix for all folders
	type number<enter> to select
	(like index-panel)

new mutt colours
	none or inherit
	don't set this component

build
	--enable-everything
	which hcache?

docs/wiki
	neomutt history/timeline

notmuch+index-color
	tag patches in *neomutt*
	"compat: notmuch+index-color" patch/commit
	=> failed merge!

compat: for docs?
	too much work

compat:
	use gitattributes to tie in with commits?
	how?

remote config -- like browser proxy setup
	display to user "are you sure?"
	useful for tips & examples
	way too dangerous

1.7.0 web features -- add "upstream" category
	for sidebar, trash

contrib dir for:
	muttrc
	vimrc

unnamed notmuch queries => create description based on query
	need rename function for sidebar-notmuch
	need option to autoadd them to the sidebar

fake/alternate curses -> true colour => separate fg, bg, term attrs like vim

cache autoconf in .git
	git config a name for retrieval, "lmdb", "tokyo"
		build -s <name>, build <name>

notes for progress bar
	set time_inc = 0 for best results (ref: paravoid)
	test read_inc, write_inc, net_inc too

sidebar -- imap all folders vs subscribed
dovecot public mailboxes for tips?  one public user?
nntp tips? ":tips" command to toggle nntp vars and mailboxes

unstable: .gitignore upstream of feature branches, what else?
	common docs, travis

1.7.0
	reindent source, split docs => base joiner

separate docs -- only the "optional features" sections

tip - status_format + status-color
	ctx->readonly => red padlock

compress examples == use full option names
	--compress, etc
	add examples of compress levels too

contrib.md -- enhancements have 2 month lifespace -> blue-sky project
coverity errors in feature patches

is contrib/ installed by any downstreams?

keywords special +label / -label
	add/remove
	don't overwrite

nntp does it use read_inc / net_inc correctly?

web docs: What *is* neomutt
	mail client
	show pictures
	compare to mutt
	explain why it's better

sidebar intro
	is "mail_check_stats" doc'd well enough?

update man page for mutt
	wrt muttrc location, etc

offer up-to-date vimrc for mutt/neomutt to vim.org
	autocmds for neomutt/mutt config locations

colour-coding good-sig vs bad-sig
	tricky for mime attached sigs

toggle-quoted : option to remember state
	or "hide_quoted_text" bool
	a caps-lock for toggle-quoted
		don't have to do it for each mail
	can this be done with "message-hook"?

help text, OPS -- move "NNTP" to front of text to make it easier to spot?

nntp list, can't sort by counts

sign all commits?
	broken by rebases, etc
	sign only changelog commit?
	all [neomutt] commits?

maildir + inotify

docs build: more sed filters VERSION, DATE, git hash?

index-color separate colours for "mylocal" and "@domain.com"
	have a list of "known" domains that are dimmed?

notmuch backend: add X-Label in editor, does "right thing" in notmuch?
unified frontend interface (notmuch/keywords) backend
one-direction script -- sync nightmare?
sync notmuch -> X-Label's?  get out of sync

check distros are installing all docs, contrib, etc

mvprintw unused?

gmail patches -> devel
	need testers

sidebar
	add dprints for debugging

git: fetch-all ∀ refs (dangerous)?

upstream sidebar docs credits -> where?

"git" in version number + commit hash?

rdiff-backup on entire mail queue -- hourly?

PATCHES bugfix lines reference neo issue #s

transcribe issue#56 vim-keybinding ideas
	-> docs/vi.txt
	wiki

mutt-tips: integrated
	tips command
	fake? email or browser spawned
	neomutt tutorial

notmuch: drop distinction between real and virtual?
	just maintain 2 lists and swap pointers?
	should simplify sidebar integration

mutt connection config wizard
	special cases for gmail, etc
		open gmail pages in browser
	test host for:
		imap
		pop
	test for tls
	ask for password
	test connection
	like evolution's wizard
	write config to file/screen

progress bar:
	better progress indicator
		a la dnf, wget, etc
	ETA?

neomutt binary
	symlink (provide) mutt

make the neomutt branding more obvious
	make it obvious to the user that this is
	neomutt, not mutt

distro RFC: what do *they* want from NeoMutt

lots of demo configs for
	index_format
	header_order
	etc
create a function to cycle through them?
	would need some good sample emails
	various headers
	various flags

compress flickers, but gpg doesn't
	imagination, or not?

eliminate "mutt" from everything in the build
	symlink to mutt in install
	too "fork-y"?

index-color -- index_date pattern?
	and index_label

issue for code required:
	fuzzy matcher: [devel] [help] [mentor]

install autoreconf -i output

docs
	create high-level workflow doc with screenshots
	show beginners *how* mutt works
	label areas of mutt window

color command (mentor task)
	no args: list all colours in a pager
	object: show object's colours (coloured accordingly)

unify colours and attrs, e.g. underline, reverse

add native compress support

improve "mutt -D"
	add comments from init.h?
	show default values/keybindings

invert index option
	new mail at top of screen

web docs
	update debian support section

web/wiki/readme ∀ pages
	last proofread date
	last proofread person
	periodic checks
	divide and conquer
	auto-footer: last updated, last proofread

script to build mutt ∀ tags

investigate & bundle? mutt_bgrun

mutt doesn't close file handles on fork/exec
	need more close_on_exec in fopen
	open pdf attach -- look in /proc for evince
	security issue

docs based on use-cases
	need list of cases to start
	put in repo
	request pull-requests to improve

a rogues' gallery web page with our PGP keys

darnir:
	use gpgme not gpg
	warn users?
	educate users
	can we force config=yes?
	what if libs are missing?

"mutt -v | head -1" is pain
	--version ?

symlink mutt to neomutt(-yyyymmdd)

no need to subscribe to mailing lists

version string bug -> devel list
	reinstate flea?

1.7 coverity -- use alternate account

travis -- test docs validation
	test make install
	compare to known list of installed files

[devel/*] on creation: notify dev-mail
[devel/*] -> [feature/*]: notify user-mail

web mailing list page with sven's muttrc example

feature: config read source'd files relative to parent
	shouldn't break anything as every path is currently absolute
	from where is a file read if it has no path?

mutt config source DIR
	loads all files within
	recurse?

issue labels
	devel = in branch
	git = in trunk
	release?
	or git is redundant

change "mutt" refs in /etc/Muttrc?

maildir_trash conflicts trash folder patch
	our patch, check upstream version
	document this

context-sensitive help?
	how?
	sensitive to what?
	how about:
		"show-me-this-file" command
		display in pager
	if in pager, close & open text file & restore on 'q'
	if in index: display & return to index after

notmuch vfolder_format isn't used
	quasi-delete doesn't
	tag-then-hide tags, but doesn't hide

github issue notifications forward to IRC
	or dev mailing list

notmuch example rc (and docs)
	escape ` (backtick)

"bind index ` command"
	parses badly
	doesn't warn the user

make config -- like linux kernel
	for all the neomutt options

c-alpha build deps docs

feature docs to separate <sect1>'s?

jump to previous folder command?
	"cd -"
	vim: "ctrl-^"
	can this be done with a folder hook?
	set my_olddir = dir
	is it too late when we get the hook?

debugging curses tutorial
	two windows
	either run & attach
	or gdb tty redirect

need name for less than features
	nuggets => minor addition
	minor docs

get rid of "prepare" or neomutt-ify it
	--all (to enable all options)
	vs "configure --all"
	./prepare --all -a => all features
	./configure --all => drop prepare

dbus - also implies
	synchronisation of multiple copies of mutt
	e.g. multiple windows/views

can *all* features & nuggets be configurable?
	too much work?

mutt -F muttrc
	allow -F multiple times

automate github release
	tag, push, create release, push, assets, checksum

unify code for notmuch/keywords tag handling
	de-dupe
	completions, etc

github issue notification
	emails, check ordering
	fix mutt sort  HOW?
	IRC: "tmg" may help

fmemopen -- when fixed, default to off

change sort option
	thread becomes a prefix
	e.g. "thread-date"

NeoMu++ logo idea?

colour for tagged emails

mailing list on webpage -- copy from release announcement

web update about.html : done so far

NeoMutt signing key on
	flatcap.org
	neomutt.org
	github? where?

xdg - Fabian -- strtok?

sync / push to maintainers
	keywords
	nntp
	notmuch

do saved emails (that get deleted from current folder) appear in the trash?

trash docs
	add purge-message/purge-thread notes
	add folder-hook to delete if >30days

mutt_dotlock
	make properly configurable
	the chgrp / chmod can't be done by a user install

trash + gmail
	doesn't work as expected
	effectively archives them on gmail

check which doc/contrib files distros install
	unify?
	debian doesn't install contrib?
	check other distros

fold/collapse empty sidebar folders
	unless unread/flagged email etc

xdg extension
	look for lower case /etc/muttrc
	etc

change mutt "source" command:
	take wildcards
	multiple args => source `find . -name '*.rc'`

vim: if no tags file, generate it

fork vs non-fork -- animal species reference
	species: noun
	a group of living organisms consisting of similar individuals capable
	of exchanging genes or interbreeding.

old features, like trash, need to live in [docs] otherwise their links won't
match the manual

colour-attach reads *all* attachments
	really?
	slow?
	filter by MIME type, then parse/colour?

new sidebar expando
	count of unread *threads*

new index/sidebar_format expando: icons
	each email can have a set of icons
	each icon has a unicode character and a colour
	sorted in order of definition
	tie-in to labels / notmuch tags

separate folder_format for dirs vs network mailboxes?

upstream bug -- folder_format, sidebar_format %n (has new mail)
	shouldn't be cleared if "mark_old = no"
	quit and restart mutt and the flag comes back

Passing $VARs to children processes, means
	tell vim about mail rcpt, subject, etc

Deprecation
	old enhancements

copying a large mailbox / number of files doesn't trigger the progress bar
	mbox-100000
	tag all
	copy to another mailbox, e.g. maildir

INBOX vs inbox
	not updating values for browser

FreeBSD, Suse -> downloads web, wiki
	OpenBSD too

Reach out to
	LinuxMint
	Mageia
	PCLinuxOS
	Slackware

browser - add flagged
	expando
	sort option

Mutt vs NeoMutt branding
	config
	binary
	install dir
	version
	user agent

$source_dir like folder
	or like $PATH?
	looking for files to source

contact distros
	are they up-to-date
	current list of distro patches
	list of recent OS versions
	list of mutt/neomutt versions for each OS version
	address of issue tracker
	address of mailing lists
	contact details for maintainer(s)
	inform them about
		mailing lists
		irc
		website / news
		github
	bcc email?
		give list of distros
		bcc => hard for multiple maintainers to coordinate
			cc better?
	ask for install instructions for web downloads page
	offer github invites to all maintainers

19:32 <mykoserocin> is there a way to show condensed DKIM results instead of full "Authentication-Details" header?
19:32 <mykoserocin> e.g. "DKIM: pass" or "DKIM: fail"
19:52 <brendan> mykoserocin, I use the spam marker system for it: spam "Authentication-Results: mymta.com; .*dkim=pass" "✓"
19:52 <brendan> spam "Authentication-Results: mymta.com; .*dkim=fail" "x"

email all 341 of mutt-kz stargazers and tell them about neomutt
	exclude the neomutt stargazers

drop or merge COPR patches?
	clean neomutt
	what about ca certs?

change PATCHES display into sorted, wrapped feature list

configure out dotlock fully

check all lists of features are up-to-date
	web, wiki, etc

source tree
	1 our git w/tags
	2 deb git no tags
	3 tar src
	no #define or -DX
	only version.c "regen" every make
	MUTT_VERSION "1.7.0"
	NEO_VERSION "2016MMDD"
	NEO_SUBVER "-58-XXXX-dirty"
	what's in .version (autoconf)?
	what about config.h
		PACKAGE_*
		"neo 2016MMDD" only
	if topdir/.git
		git describe
	if neomutt-*
		sed
	else
		nothing - debian
	if !.git
		nothing - tar
	our git full auto from git tags
	others .neo-version
		M=170
		N=2016
	put neo version in diff
	suffixes *only* relevant
	for devs using .git (ours)

context sensitive popup menus
	e.g. index - tag some emails, hit <menu>
	options: copy, save, delete, set flags, reply, etc

source script|
	pipe -- lookup exact meaning and implications
	works, but can't tell you where an error occurred

doc muttrc color attach differs from contrib

test keybase in mutt -> Josh

suse -- no neomutt?

test clean fedora install + mutt + dns during startup

test website
	neo vs www.neo
	http vs https
	with/without subdirs

link to unloved enhancements in issues
	rather than the wiki

PATCHES
	change patch-* to feature-* ?

announce vim syntax files for mutt

notmuch 1.7.0 updated for Karel

nntp sync and update for Vsevolod

vim-like hls option: persistant across emails

transfer gpg keys from flatcap to mutt
	mutt cron to update them

pager -- sidebar gets updated but not status line / term header

notmuch tag-completion:
	when using -XYZ<tab>
	only match tags that exist on the selected mail(s)

release: always sent release message to neo mailing lists
	using new version "User Agent:"

modularise header caching/dbs
	=> needn't use same cache type
	for header / message cache

www.neomutt.org -> neomutt.org
	CNAME

imap only 'n' messages option

mbsync better offlineimap

hcache that works offline!

imap force body cache on read
	option for offline working

files/dirs are sorted the same way as network folders
	may not make sense

need separate folder_format for
	local dirs
	net folders
	virtual folders

alternative -- folder_format add
	%local expando for use with nested-if
	conditional display

imap_folder_format defaults to folder_format if empty

21:04 <bremner> I too would be interested in a page comparing neomutt's notmuch support with notmuch-mutt (the perl hack that ships with notmuch)

sort variables, etc before auto-completion
	or properly sort the sources of the strings

rename contrib/vim-keybindings -> contrib/vim-keys

how many more features can be --disabled?

drop flatcap/neomutt fork?
	used for coverity testing

arch-linux: search for a Trusted User (TU)
	to adopt neomutt

new diff generating script
	exclude.txt to filter out stuff

can a git merge be reverted?
	undo a feature's merge?
	then re-merged later?

announce vim-syntax, put a public copy up
	copy all of contrib/ to web
	create web autopage?

check mutt-tc for project ideas

restore git-version-gen

Terry update lunar - point to NeoMutt

ifdef needs an "else" condition
	how?

ask distros how they'd like to be informed of new releases
	if at all
	if web/ml/etc
	not enough advanced warning

development bottleneck
	document more tasks
	delegate more tasks

script for "build-all-git-tags"
	publish

project jobs:
	release-maker
	issue triager/splitter

need: code of conduct statement
	simple
	translated
	versioned

should log files be localised?
	make it an option?
	debug -> english?
	hard to debug for other nationalities

if someone else makes a release, it needs to be signed by them
	need to cross-sign all the neomutt signatures
	need to be public (web) and signed

triage:
	base issue becomes the discussion board
		create a matching project
	triaged into tasks
		notes on the project
	developer adopts one
		note -> issue (devel)
		assigned to them
		[devel/*]
	completed
		issue (release)

timeout hook missing from hook docs

vim-like record macros 'qa'
	save macro
	play macro

website/repo for scripts
	like scripts.irssi.org
	site generated from the script headers

index-fold-level
	0 completely folded
	1 depth 1
	2 depth 2
	-1 no folding
	overridden by user keys
key to
	view current message
	close other folds
	etc

what are our killer features?
	put them on the website writ large
	scripting
	matcher?

matcher
	extend to index, pager, etc

projects triage notes need
	dependencies info
	ordering
	number note sequentially
	use these numbers
	update when note becomes and issue

is there a projects GH API to extract/manipulate
	project notes, etc, outside of GH
	YES

How many features/nuggets can be replaced by scripts?
	subjectrx - obvious one

Need strategy for unrepeatable/too-little-info bugs/crashes

new-mail-hook + lua to filter
	=> need filter manager

(un)new_mail_filter lua [lua...]

urge all dev-ml users to join users-ml
	send an email?

startup-hook
	immediately before displaying the index for the first time
	useful for testing
shutdown-hook
	before closing mailbox connections

turn mutt into a random email generator

forgotten-attachments: German example:
	"häng an" won't match over a new line
	strdup regex string, replacing spaces with
		"[ \t\n]+" ???
	does it work with \n embedded?
	could I pre-process the email text?
	it it utf-8 compliant?

projects: translation
	which languages?
	document which are supported
	status: full, partial, started, none
	see https://weechat.org/doc/devel/

filter manager
	time limit option -- on holiday!

guarantee translations, when?
	at release of new feature?
	at next release?
	when?

alt-e resend_message - which hooks are called?
	add lua hook

separate packages for neomutt
	neomutt		- binary
	neomutt-docs	- main manual
	neomutt-contrib - muttrc, vimrc, etc
	neomutt-dev	- code docs
split repos to match
branch by version / language

syntax file in local vim syntax dir needs to be called
	muttrc to match vim modelines in other files

:set variable=MAGIC_TOKEN
	=> set to default value
	history records the default value, not the token
	TOKEN=$default ?

use hcache to store other info?
	e.g. top tips - which are read

fix notmuch syntax & announce

nested-if script

summary pages:
	:about
	translatable comments
	closes any existing summary page / help
	:tips
		mbox in contrib/
		nntp (if available)
		links to web if not
	:credits
	status line shows list of summary pages

add cursor to pager (on/off)
	=> can highlight text
	can click links
	like firefox cursor mode

perms for members, branches, repos, labels, projects, milestones

config file accept keybindings using
	C-	Ctrl-	Ctl-
	A-	Alt-	Meta-
	W-	Win-	Mac-?

macports, is there something I can update automatically at release time?
	cf homebrew

generic lists of volatile variables attached to
	mailbox/context or
	email
scripting could save info there, such as
	num emails in thread
	num new in thread
	score
move score from permanent to volatile

pgp key manager/management
	list, ignore revoked keys
	sort options
	filtering

colour manager, see htop

window manager
	menu mode, like jed/links
	popup menus

notmuch date adjuster doesn't need $var
	it can <adjust>read value<enter>

forgotten attachment - warn on empty subject?

mime-typer plugin
	notify if the mime type doesn't match what *you* think it should be
	change the type (option)

cmocka -- unit tester

feature docs: change
	"dep 1.7.0" to "since 2016-06-11"
	drop "part of the NeoMutt project" (obvious)

doc travis build system
	push, pr, txt files, .yml
	explain why centralised
	explain why not container build

justify every file in the neo build
	use min-build to start
	show compilation steps

multi-line index.  options:
	for all entries
	for current entry
	for current thread
wrap long fields
sacrifice height to save width

is hcache data hashed on fields in db, or all fields?
	i.e. why does HCACHEVER change so often

fork -> C11 code

howto: update website
	ruby, jekyll
	which gems needed?
	"jekyll serve" to test

breakdown
	source (simple)
	source (conditional, e.g. feature)
	source (conditional, e.g. OS libc)
	build (scripts/Makefiles)

scratch-pad function
	creates a tmp file
	functions can put text in it
	you can view it in the pager
	you can edit it
	you can save it
	could be used by scripts to save output

change from autoconf -> cmake

distros
	debian sync
		get riesebie to look for deb patches to merge
	push sthen (openbsd) for action
	mageia
		install
		test copr
		contact

branches
	fix and merge virt-un

vvv
	nntp fixes/sync
	list of patches
	bugs
	need sync
	12 distros
	compress too

docs
	list large blocks

docs - nested if
	better explanation of %<>

eradicate notmuch's use of strndup, strnlen

purge all macros from neomutt?

new two-letter expandos
	initial letter picked with no clashes anywhere
	=> 26 more expandos to use

vim has set vs setlocal
	mutt has accounts as separate entities
	set      var => global
	setlocal var => per account

$sort = [prefix-][...]order
	prefix = reverse
	prefix = thread

index folding (happens above level of emails)
	fold by option, e.g. day, month
	Wednesday
		mail
		mail
	July
		mail
		mail
	uses extra lines
	saves width

website dirs could be git submodules
	NO, complicates updates

de "neo" the trash docs & keep in neo repo

website
	top-level dir: translations
	list of langs
	state of each
	etc

21:55 svenG "No attachments, cancel sending? ([yes]/no):"  so NOT cancelling the sending.. sends. o_O  double negatives are always so confusing.. :-/

irc webpage
	mention freenode's web interface

debugging docs:
	100k lines of code
	help us find out which
	bug report blurb

perl script to show projects
	ordered
	nested

use startup hook & scripting + offline hcache
	to locally cache email
	local cache => strictly readonly

"mutt -D" chokes on status-color color commands

website top-level for scripts
	git submodule?
	like irssi scripts

docs - how to transition to neo - list config options
	mutt-only
	neo-additions

function fuzzer + scripting
	x inputs
	y globals
	difficult because of too many inter-linked structs
	and poorly designed functions

issue labels
	confirmed
	need testing
	waiting for OP testing
	have patch

on release update po/*
	reduce number of fuzzy translations?

projects
enhancement
	blue-sky
	in progress
	done
	questions
	more info
bugs
	todo
	more info
	in progress
	done
	released
easy tasks
	todo
	assigned
	review
	done
	released
docs
	to be written
	in progress
	review
	published

newbie notes
	PR vs branch
	you can't co-work on a PR

imap/pop ∀ devs
	no outgoing
	incoming to user@dev.neomutt.org
	sample emails refreshed nightly
	btrfs de-duped -- cron
	or cp --reflink

function to turn option list from
	(S)ubject to *S*ubject (highlighted/colour)
        make them consistant across mutt
		some are just capital letters

new mail hook -- frequency limit
	if time < 5s since last notification

can we workaround the case of gpgme + self sign / smime?
	but use it otherwise?

"report issue" notes -- OP needs to be around to:
	answer questions
	run tests
	etc

calcurse -- curses calendar app

sidebar -- disable indent, etc if sorted

update notmuch README to NOT reference mutt-kz

generate (script) tree of all source (by tags)
	and create squashfs

htop colour palette only works well because there are
	few object to colour

#179 - Clean neo build
	create checklist of problem configs
	ask for volunteers

Create every doc idea as empty template page in web
	with notes
	list of docs in project "docs"

distro web pages need install instructions for development, too
	min/max dev packages to build & debug neomutt
	all instructions based on min distro install
	note exact distro instructions were written for

admins need to make a release in 1 week's time -- practice
	(one of them, or all)

update notmuch readme
	complete merge into main doc?
	UPDATING.kz -> ChangeLog.notmuch?

bot on server to mail dev list on git commits?

https://github.com/coreboot/coreboot
	uses linux kernel config

move separate tools to a separate tools directory
	adjust ctags to ignore them

kyoto missing from README.neomutt
	anywhere else?

doc all features' functions doxygen style

nested-if -- index-format display ? if doesn't match string put in
	%<> changed to %? !

configure doesn't parse slang option unless ncurses libraries are missing
	check if this is still true
	raised by @nevermind

put trash/sidebar back into PATCHES / features

index preview mode - display 'n' lines of the email body
	when in the index

new feature checklist -- code all configs, doc, readme, web, doc validate

issue labels
	regresssion / still not fixed
	confirmed
	backtrace
	reproduceable
	screenshot
	logs
	config
	confirmed fix?

does label workflow make sense for PRs?
	if not, why not

update neo readme, new credits

ask new contributors to fill in 5 function prototypes!

find all non-mail users of pager
	add to index/pager tests

need way to repeatably test net failure
	tcpkill -- doc in dev web

external testing
	how many external events can we control?
	how many can we simulate?
	via pretend keystrokes
	key, mouse, winch fs, net

make tags -- ignore standalone tools
	needs to ignore #ifdef TEST, too

docs - keep reference copy of all relevant RFCs
	links, obsoletes, etc
	mailcap too

2016-10-21
13:24 <mgedmin> on ubuntu I think it's best to 'sudo apt-get build-dep mutt' to get all the libraries

issues -- always assign (for later reference)
	fixer/mentor only makes sense for bugs/enhancements
	what about questions?

new $vartype "letters" == STRING
	for "set var += X"
	or  "set var -= Y"

+= / -= works for strings, letters, numbers
	easy task?
	what about *= /=
	regexes performed on strings?

de776ea - drop tgetent
	check with Fabian

gahr tgetent branch

neodev ml function headers - ask for help

would notmuch be able to filter out muted conversations?
	No, not unless we change headers and notify notmuch

neou -- notmuch 2nd class citizen?
	since big changes -- what *used* to work?
	what would improve it?

new users -- [ci skip], #123 docs

need to document "missing" keybindings
	^Q ^S flow control
	^O terminal (BSD only)
	2016-10-23 22:16 <Riviera> stty discard undef; mutt
	"stty -ixon" disable Ctrl-Q
	can this be done programatically by mutt?
	"stty -a" to show settings
	cfmakeraw(3)

code school
	variables
	functions
	architecture 101
	web top-level

pre-cache app?
workflow:
	offlineimap
	notmuch new
	cache-every-file

update /devel-notes.txt
	inherited from mutt
	needs modernising

mutt_launcher
	use a pipe to channel log messages back to mutt
	pipe(), fork()
	dup2() to replace stdout,stderr
		=> printf to log
	stdin -> null

2016-10-24 20:54 <flip214>
	it would be very nice if switching to an imap folder could be aborted by ctrl-c
	having all headers fetched anew and having to wait for 2 mins, knowing that the wrong folder is being loaded, isn't that nice
	the counter for the headers fetched (N of M) counts up
	Ctrl-C gets ignored

timeout hook is only called from curs_main.c
	it should probably be called from pager too

2016-10-25 11:04 <mgedmin>
	pet peeve: when I try to open a gigabyte-sized mbox file with 10,000 messages, I cannot abort that

nested-if
	stack of nesting chars in char[]
	$? or $< push only
	matching char => pop
	32 deep stack

Karel tidy/cull issues

gahr, hcache
	one formatting string
	+/- override format strings
	separate code files
	autoconf hcache=X
	separate code dir?
	hcache/*
	all via hcache.h
	.so dyanamic library
	conflicts autoconf a bit
	multiple static/dyamic
	global?
	per mailbox?
	break deps on mutt structs

cache files need to hash their name too
	to avoid two systems "sharing" a single hash
	and crashing

neomutt members -- ask preferred method of communication
	pref name @flatcap, Rich

multiple hcaches => RAID-like write many, read fastest
	two caches, local and shared?

labels -> vim, ignore [.*:] abbreviate to 4 chars, 3?, 2?, 1?

merge notmuch
	"named-mailboxes" command
	can describe sb entry
	how to nest virtual?
	sb obtion: display real, virtual, all mailboxes
	nest -> fake mailboxes
		named-mailboxes name [NOTHING]

run notmuch new from mutt when new mail arrives
	necessary? or not?

named-mailboxes use Mailbox Shortcut % ?
	%tidy-name
	needs plugging into other code
	abbrev names to "%name" if possible
	if configured?

have a NULL cache which is just a copy of the email
	might *still* need a DB of some info
	tie into offlineimap

use google translate for rough drafts of neo po files?
	mark all translations as fuzzy
	useful starting place?

summary pages -- list of pattern modifiers
	:patterns

settings for indent, uncrustify, clang-format
	for current neo code
	for future  neo code

put features in separate <book>?

docbook build -- kill trailing whitespace
	broken x html links

easy task:
	distro helper
	instructions for
		install
		build
		test
	check installs
	test problems
	one+ person per distro

look through upstream mutt trac for
	enhancement ideas
	feature patches to apply
	bug fixes
	[easy] ?
	comment in track "neomutt adopted" when done!

timeout startup shutdown -> feature/hooks

rfc add line numbers and 'a' links
	create as a book in main docs (for linking)

enforce real names in git commits?

run/ irc
	howto privs
	topic
	promotes/demote ppl

raise homebrew travis issue

website
	404 is static!
	manual/guide -- not a collection
		needs to be ordered
	src code is not a distro, so list it last

web page issue summary
	autogen daily, just links

man pages need section number
.IR error in mutt man page

add author to rss feed

test {% assign %} author in liquid "function"
	use capture if not global

un-named-mailboxes needs to work against path or description

named-mailboxes eats two params
	can take multiple pairs of params

imap supports queries
	"+?query=tab:inbox"

virtual-mailboxes => notmuch
	=> don't need "notmuch://"
	or even "?query="

distinguish distros' neomutt
	{vanilla|patched}
	{replaces|addition} to mutt pkg
	{distro|user} maintained
	{all|limited} features included
	{hcache type}

distro contact details
	separate from maintainer

review indent of our code

ccache instructions, ctags for dev?

move sidebar-intro to howto and fix links
	change id to howto/
	or split out completely

"edit this page" button
	doesn't make sense for docbook conversions

slang deps on distro page

distros
	platform {linux|bsd|macos}
	where to coredumps go?

are all closed enhancements requests marked as blue-sky?

merge hcache docs?

create file on all neo members
	who's who
	who's done what
	date of last contribution

feature: since
	could have multiple since
	with the addition of extra bits
	or since: last update (fix / feature)
	or mini changelog

travis disable docs

person pages
	list "worked on"
	real name
	nationality
	location
	language?
	links
	∀ users

split out upstream features, or yaml tag them

DANE instructions for neomutt gpg key

web
	auto-generate list of WIPs
	[devel/*] -> list
	where does the description come from?
	update daily
	since DATE
	last update DATE

start de-globalising (pass to functions)
	Context
	Incoming

Pre-commit checks
	formatting
	authorship (real name on commit)
	credit
	translation on strings
	check_sec.sh

rename downloads link (it goes to distros)
	or re-instate download page

each web dir, have _source.txt
	details origin of page data
	scripts for generating

cron task:
	check mutt vim syntax file for updates

neomutt -> master?
	now that I'm not maintaining multiple neo branches

code school -> neo branches (regularly rebased)

mailmap for all neomutt contributors

stable branches for LTS releases?
	Why?  Mutt doesn't

SIGHUP/SIGUSR1 to force an update?

SINWINCH hook
	resize-hook
	takes conditions param, e.g.
		width > 80
		width = 80
		height < 10
	needs to be run on startup, too
	idea from labelette in #mutt

annouce GPLv2 usage for project
	make it clear on the (devel) website

docs: sidebar intro has two "default" settings

docbook -> html leaves artifacts (missing whitespace)

generate valgrind suppression file
	contrib?
	devel page instructions

web: misc page for extra options that aren't in features

web: changes page -- since/relative to mutt

list of ALL vars, fns, cmds
	link to relevant feature/misc page
	web home/changes?

tool tips on everything?

dev build all version
	publish script

website jekyll serve instructions

travis-build
	allow line comments starting #

travis update neo conf

getting started
	mention travis notification email

update all doxy templates
	JAVADOC_AUTOBRIEF on
	FULL_PATH_NAMES off
	SORT_MEMBER_DOCS no

news:
	compress promoted to upstream
	translators needed
	stars: have you?

Distro pages:
	Debian, Gentoo, MacPorts, NetBSD, Void
	need filling out

add official Mutt source to mutt GH releases
	sign it

How to Use Mutt doc
	step 1 - select your source
		POP, IMAP, local, offlineimap/alternative

issue type:
	code (implied)
	scripting
	build
	docs

web: features list page
	add upstream column

docs: highlight parts that are neomutt only!

flag variables (in init.h) that are sensitive
	"mutt -D" will obscure them
	"mutt -DD" or "mutt -Dv" will print them
	or "mutt -DH" will hide them?

translate:
	check git logs for translators' names / dates
	tidy all headers

translation - coding, scripting, languages

collect useful tools in neomutt org:
	urlview
	offlineimap, mbsync
	procmail, maildrop, sieve
	etc

re: inotify idea
	2016-11-16 12:13 <royger>
	flatcap: maybe using some abstraction library, like libfswatch
	(it seems to support kqueue, inotify and fsevents)
	https://github.com/emcrisostomo/fswatch/tree/master/libfswatch

magic "combined" folder
	mbox part for unchanging, historic stuff
	mbox part needs hcache for speed
	maildir part of changeable stuff
	combined into one view
	need method to "fix" emails i.e. mark them as no-more-changes

offline working
	mutt hangs whenever the network goes down and is essentially useless
	what's needed to make mutt useful without a network?
	"auto-postpone"?
	"send-on-reconnect?"
	cache more information about mailboxes?
	network heartbeat to detect connectivity?

hcache
	when it's done, create an hcache test rig
	only use hcache API

donate page
	presents for flatcap?
	contributions to neomutt.org domain?
	get-together costs?
	what?

