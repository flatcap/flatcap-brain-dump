Config Integration

Docs: encapsulated types

cs_create(n), register_types()
cs_register_variables()
cs_add_listener()

parse_set -> new config
dump config -D
complete <tab>

split init.h (comments -> docs)
check initial of -1 works
move SYN to syn.c

create List type flags for separation
SEP_COMMA|SEP_SPACE
SEP_COLON
sort flag?  ALPHA, NUMERIC

how do I deal with set noX, invX
should config deal with it?
perhaps the type should know whether it can be
negated/toggled?  set &X too (reset)

set X		bool=1	quad=yes
reset X		bool=0	quad=no
unset X	or noX
toggle X or invX (bools and quads only)

toggle X Y Z -> set invX invY invZ
unset X Y Z -> set noX noY noZ

set ?var -> display value
set &var -> reset var

"all" -> every config

unset/reset my_VAR -> delete
set X=$Y -> expansion
(documented where?) NOT
support set VAR? (postfix '?')

how to handle notification for "reset all"?

flag types:
	can be "set"  set X valid    
	can be "inv"  set invX valid 
	can be "no"   set noX valid  

validator for "charset"
could the validator have a side-effect?
*do* the actual char-setting required?

custom type for charset
	encapsulate x_is_utf8
	and replacement char?

validators for:
	show_multipart_alternative
	debug_file
	debug_level

validator != listener
validator before, listener after change

set up some "default" validators
	val_not_null
	val_not_empty_string
	val_numeric
	val_no_spaces

relative paths
	relative to what?  (muttrc?)
	who calculates?
	does config store name of base variable?

new assignment operator?
	:=  (expand at time of use)
	expand recursively?
	use for passwords?
	so that they're not cached in neomutt
	or $= ?
	@=
	workaround is to escape $
	set x = \$y

function/known data
	source_rc		FILE, LINE, !SYMBOL
	mutt_parse_rc_line	!FILE, !LINE, !SYMBOL
	parse_set		!FILE, !LINE, SYMBOL
	mutt_option_index	!FILE, !LINE, SYMBOL
how do we pass out a meaningful error message?

config non-null flags (may not be unset)
	most regexes (those without initial string)
	shell
	all format strings

validator for each format string
	checks if the %x expandos are valid
	run a test parse of some data?

config time type that accepts
	10	seconds
	10s	seconds
	10m	minutes
	etc
	display as what?
		seconds?
		shortest abbreviation?
	depends on flags?

Config dump
	flags: active vs disabled
	register flags - disabled =>
		no var ptr
		no validator
		no listeners
	dump MUTT = X|Y|Z flags
	dump NEO  = P|Q|R flags
	parse config silently accept disabled
	flags for warn on synonym/deprecated
	flags for warn on disabled (in this version)

should dump_config be able to dump ALL config
be able to reproduce the entire setup
	colours?
	aliases?
	hooks?
even if the CLI can't, the UI might need to be able to, for commands:
	:colors
	:aliases
	:hooks

config
	put other globals into hash
	CFG_PRIVATE
	don't show up in neomutt -D

config push/pop or save/restore
	save_config; set var=x; function; restore_config
	no more need for my_var use

config - accept disabled
configure flag? or CLI
CLI warn option

typedef numeric/enum config types?

flag on HE var-def to show "SET_BY_USER"

add locking to set functions
	-> thread safe updates

debug log all processes
	change to debug(5) before merge
