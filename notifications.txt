(N)eomutt
	AccountList[A]
	Config
	WindowRoot
	History
	Aliases
	HeaderCache
	BodyCache
	Hooks
	Environment
	Events: startup, shutdown, timeout

(A)ccount
	MailboxList[M]
	(AView)

(M)ailbox
	EmailList[E]
	(MView)

(E)mail
	(EView)

Config
	Events: initial set, set, reset

WindowRoot
	Window hierarchy
	Each window is listenable, with events
	Events: change focus, window (in)visible

Config
	initial set
	reset
	reset all
	toggle -> set
	ignore disabled/obsolete config
	notify ALTERNATE on synonym use

NeoMutt
	new account
	delete account

Account
	new mailbox
	delete mailbox
	mailbox changed?  how?
	account opened
	account closed
	account sync'd
	connection lost?

RootWindow
	WINCH for neomutt to listen to
	specific window
		WINCH
		visibility
		focus

Mailbox
	new email
	del email
	changed email?
		or is changed just seen recursively?

Email
	email changed (attrs)
	deleted

Config
	what about A-specific changes?
		same mechanism?

------------------------------------------------------------

Notes:

Does sidebar own window or vice versa.  YES, former
When I "set sidebar_visible = yes" what events happen?
Config validates, sets, notifies whom?, N, then what?
ComponentList { sidebar } -> sidebar_init(), listen to N
Sidebar listens to change-mailbox
	doesn't repaint, just marks window dirty?
Status bar initialised like sidebar
Bundle notifications
	start()
	lots of things
	end()
Each notify target needs list of children?
	or a function to enumerate them
lua callback ∀ notifications

------------------------------------------------------------

Bundle notifications
1)
	get_uid()
	send(ev, bundle_id, ...)
	send negative bundle_id to end
	useful for threads, complicated otherwise
2)
	bundle_start()
	...
	bundle_end()
	good if list takes a while to compile
3)
	notify(event*LIST*)

is list cached until complete?

------------------------------------------------------------

Cases:
	populate index/sidebar for first time -> multiple notifications
	new mail - want to know ALL details, A, M, E (bundled)

------------------------------------------------------------

N,A,M,E listener

Listen to N (EventType, flags, callback function, data)
L knows its parent
does it care about children? NO propagates upwards

Notifier (Type, parent, LIST(listeners))
type only needed for debugging?
opaque type: event(obj->notifier, event type, data)
add listener, remove listener, event

callback (event, flags, object, data)
N-objects N, A, M, E - ~16 objects (4 bits) enum or flags?
each object could have 28 distinct events?
or
FLAG_RECURSIVE|FLAG_ALL_EVENTS to mop up
need event structs
ENewMail { M, EL }
EWinch { w, h } or { ow, oh, nw, nh } old,new

Sidebar
	new account }__ repeat for startup
	new mailbox }
	del account }__ unmailboxes
	del mailbox }
	select mailbox
	select account
	winch

notification interface
	each object should start with "int type;"

notifications
	Config attached to N
	what about A-specific changes?
	CfgAccount needs A ptr - changes notify A, not N
	BE_init() -> listen to N
	notify(new A)
	BE listen_to(A, recurse)

multiple notifications
	one on each M that's changed
	plus, one on A -> STATS_CHANGED
	one on N, too?  ACTIVITY?

------------------------------------------------------------

Index
loops waiting for key input
	km_dokey(MENU_MAIN)
	triggers timeout

start with passive panels / listeners
- status bar
- help?
- sidebar?
- new mail command

------------------------------------------------------------

status listens to Config, AME?
does status *need* any GUI code?
	just format string to specification
	not worth splitting

listener function for events
gui function to display in window
txt function to format string

need status_init() too
	status_shutdown() - not nec for passive panels

menu/screen repaint just displays cached string
	(only when all deps that might change display are events)
unless:
- forced (Ctrl-L)
- WINCH
- NAME event

status also handles terminal stuff
	ts_status, ts_icon

status format also needed by NewMailCommand
	separate source code
	use status format fn
	new mail is passive

when event-driven, status could be farmed out to Lua!
	access to AME objects, expando_fmt(), add_color()/attr()

------------------------------------------------------------

need to rename struct Event out of the way

status needs Context too -- pattern
attach Neo version to N object
status cache Context, AME (current)
M needs A-ptr for A-priv data
does E need M-ptr?
	do they have a unique parent? PROB NOT
	what about notmuch (multiple views of same E)
so status needs Context + NAME

add 6th debug level for notifications

------------------------------------------------------------

new mail - how do %f - mailbox and %n - num new work?
	can't use status' fmt fn
use fake mailbox? NO
have custom format fn that delegates to status fmt

NewMail event only has {M,EL}
	%n - num new
	%f - mailbox
most status expandos are meaningless for new mail

------------------------------------------------------------

hooks - folder-hook on Account?
most listeners will need to watch N recursively
all hooks/focus on N?
same with window
nobody cares about a specific window?
	except the painter
	status listens to status_window for WINCH
who's listening to M?  index is
NewMail needs to listen for (M,recurse) on N
on SIGWINCH, notify all windows, breadth first
how to prevent multiple notifications to a single window owner
recursive listeners need to filter out dupes.  HOW?  hash?!
A,M,E-hook change of focus - start at N

Have event structs ∀ events?
even if only delivering a ptr
that way we can version the events
helpful for Lua scripts, etc -- not code dependent

Who owns A-hooks?  N?

------------------------------------------------------------

NAME

N static or dynamic?  Dynamic
create early in init
add children as they become event-enabled
events: startup, shutdown, A-add
parent NULL

∀ sub-systems init() - allow them to listen to N
status: add_listener(N,A|ADD, ONLY, callback, data)
-> LL (listener list) += {subject, flags, callback, data}

rc mailboxes XYZ -> A-new, M-new
account-hook, A-add, M-add

will config become dependent on libnotify?
	config -> libnotify -> libmutt?

no more shutdown code
	code listens for notify(N,DEAD)
------------------------------------------------------------

unmailboxes

∀ M.EL notify(M,E-del)
	except where refcount > 1, e.g. notmuch
	if user's in pager need to notify email first
M -= EL
notify(A, M-del)
A -= M
if empty(A) notify(N,A-del)
N -= A

------------------------------------------------------------

index (via init) -> parse_unmailboxes
resolved to an M
notify(M, HIDDEN/UNSUB)
calls remove(A, M)
remove M from A.ML
M.release() (may be other users?)
release - dec refcount, if zero
∀ EL, release(E), if zero
notify(E, DEAD)
remove E from EL
free(E), NULL
notify(M, DEAD)
remove M from ML
free(M), NULL
if empty(A) remove(N,A)
∀ ML, release(M)
notify(A,DEAD)
remove A from AL
free(A), NULL

------------------------------------------------------------

Array of emails
FOREACH on E.notify

on unmailboxes, who decides new focus?
on del mail, who decides new focus?
on del account, who decides new focus?

on E-DEAD, which M do we notify?

notmuch returns 1000 paths, then what?
currently that's ONE A, if it's open
if not, open '/'
A.add_results -> A.ML.EL
	depth first search for matching mailboxes
	what about missing 'cur/'?
notmuch's A is HIDDEN/UNSUB
account A -> VISIBLE/SUB'D
notmuch just lock (rc+1) all maildir A's!
what about M's?  listen for user, add our own

Each VIEW needs to addref the object it's watching

------------------------------------------------------------

mailboxes DIR
resolve -> failed
create M, canon
find A -> failed
create A -> notify(N, new A)
add M -> notify(A, new M)
mbox_open() -> notify(M, add E * n)

only *new* E, when <sync-mailbox>

------------------------------------------------------------

M = held by A,I rc=2
timeout -> index/pager/compose/etc need to cede control - run_loop()?
timeout -> BE (inotify/imap push) M deleted
Notify(M,DEL) -> index -> R/O -> error if current
	BE M -> immutable
	Pager listens too? (prob not nec)

A-M-E -> pager + unmailboxes(M)
	index has hold on M (rc=2)
M is VISIBLE(SUB'D) -> hide(M)
	notify (M, state change)
M is HIDDEN no action?

M - unmailboxes, External deletion, unaccount
	UN -> hidden, but still usable
	ExtDef -> hidden, immutable

M1, hide A-=M, (N-=A)
M2 (A,I) hide, notify(hidden), (rc--)
	when index closes (change folder)
	M(rc=0) -> notify(DEAD) (kill A too?)
M3 (A,I,SB) unmailboxes -> hide, notify(M,hidden)
	SB listen -> drop M (rc--) if !current
	Change folder, index drop M (rc--)

M's a real Mailbox so hide, but don't delete
A starts with "mailboxes" or imap sub'd M list
	A gains Ms by opening/navigation
	what about notmuch?
can't preseve notmuch, possible they won't get reused
notmuch moving window is "same" M
when moving away from M, who decides?:
	maildir: keep
	notmuch query: delete
change folder is index: free(M), open(M)
mailboxes/subscribe -> M(rc++)

------------------------------------------------------------

Mailbox - refcounts
	new +1
	free -1
	resolve 0
	subscribe +1
	unsubscribe -1
	find +1
	find2 +1
	ac_add +1
	ac_remove -1
	ac_find 0

Opened counts
	open +1
	close -1
	reopen 0

------------------------------------------------------------

NeoMutt    ->   Notify     =>   Listeners
		type		Flags
		listeners[]	callback
				data

notify_send(N->notify, Event)
add_listener(N->notify, callback)

A -> M(2)	Account 1 ref, Status 1 ref
	unmailboxes M
rc=1 hidex M (if visible)			Notify: state change (M)
	if (rc = 0) remove (A,M)		Notify: removal(A,M)
		if (empty(A)) remove (N,A)	Notify: removal(N,A)
	if (rc >= 1) stop

------------------------------------------------------------

Mailbox
	(S)ubscribed
	(H)idden
	(C)urrent

S	rc1	Account flags S		[1]
H	rc1	Account flags 0		[2]
CS	rc2	Acc/Index flags SC	[3]
CH	rc2	Acc/Index flags C	[4]

status bar (B)

B => +1 ∀ states

[1] unmailboxes
	notify state(M)
	notify remove(A,M)
	notify remove(N,A)
unmailboxes -> subscribed -> hidden (rc--)
unmailboxes Pager(E) -> does this close the pager?
	or M(rc=1)
SB listens for (E enter folder/leave folder)
	to know current folder
A doesn't list ALL M - see nntp -> browser
What's unmailboxes *mean*?
	forcibly remove from A? YES?  NO?
	what if user tries to change M after unmailboxes?
Who's holding M?
	index, sidebar, status?

M has been deleted outside of NeoMutt
	=> R/O allow to save cached?

BE timeout detects M has died
notify M(dead), A(remove M)
index listens
Error for open M

------------------------------------------------------------

Multiple owners of Emails
E has "canonical" owner -> maildir
	notify's parent is A(Maildir)
other owner notmuch listens
*any* changes cause notifications to propagate up Maildir tree
notmuch spans multiple maildirs - many M's, potentially several A's
lkml spans several git repos, but is "canonical" - it owns the "files"
notmuch doesn't need maildir M's and A's to start
notmuch perform query, ask maildir BE for emails
have notmuch M with E's from many canonical maildir M's
E need canonical parent ptr to M
if SB listens to notmuch M, it won't hear anything!
E needs multiple parents?  NO
	notmuch listens to "canonical" M and
	transplants events onto notmuch M and propagates

observer: special retval to have self removed from list
	(for one-shot actions)

filter out "set" command, etc
	as they send out notifications separately.  NO
command create even with raw text?
cmd notify on failure? NO
"finish" YES!
cmd function returns flags - Don't notify (already done)
	(for custom notifications)

--------------------------------------------------------------------------------

config: global, account, mailbox
only on ConfigSet
global should go through N.subset (for consistency)
account through A.subset, M through M.subset
A.subset.notify.parent == N.notify
M.subset.notify.parent == A.notify
M_config => must use named_mailboxes: need scope name
Global  uses N.subset notifies parent N
Account uses A.subset notifies parent A notifies N
Mailbox uses M.subset notifies parent M notifies A notifies N

ConfigEvent { enum scope, scope name, varname, he, cs }
scope = (Neo|Acc|Mbox)
scope name = NULL, "Acc", "Acc:Mbox"
varname is plain, "sidebar_visible"
who's observing at what level?
observe N for global config, lots of code (really?)
observe N for A config, or M config?  nobody?
Observe A for A config: GUI dialog?
	Dlg has current (A|M|E) listens to A (or M|E) for config changes
	triggers recalc|repaint as necessary

A,M-specific config notifications should be routed through A,M!

do myvars trigger notifications?

contract for notify API

