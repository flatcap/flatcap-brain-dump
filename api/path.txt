path_pretty()
	order for evaluation?
	run path_canon() first

consider
	folder for +
	home for ~

tidy paths for ???

mailbox backends don't know about $folder
shorten by +, ~, what else?

canon. expand prefix ∀?

separate path from mbox?  YES
	where? when?

canon
	expand
	local path vs canon mailbox

path:
	expand ~ (need $HOME)
	tidy dots

mbox:
	expand leading 'magic' chars
	get type
	need $folder
	delegate to mxapi

folder expansion *needs* to be done my mbox backend
	need to identify magic of $folder first

if [^-!<>@] subst, LOOP
if [+=] identify $folder, delegate to mxapi, END
if [~] subst $HOME, END
else relative?

tidy
	~/ or ~X/
	/ or other

check: are mutt_path_dirname() and mutt_path_parent() identical?

[☥] all the neomutt magic folder abbreviations
	[^-!<>@+=~]

canon(X) full path
	~/path
	relpath
	untidy path
	full mbox
	+mbox
	untidy mbox
	[☥] -> expand tidy

pretty(x)
	full path
	~/path
	relpath
	untidy
	full mbox
	+mbox
	untidy mbox
	[☥]?

1) canon
2) $folder
3) ~/

path_abbrev_folder
path_parent
str_inline_replace
mx_path_{probe,canon,pretty,parent}

when do M->path, M->realpath differ?
	M->realpath is realpat()d (symlinks followed)

replace realpath() with mutt_realpath()

add realpath param to mailbox_new()
	since we already know it

fs.path = absolute
fs.realpath = real path (no symlinks)

rename realpath to canon?

imap.path = full imap://...
imap.realpath = imap://user:port/...

notmuch.path = full notmuch://?query
notmuch.realpath = notmuch://path/to/db?query

when is $folder removed?
what if $folder includes user:port or db path?

canon: Leading magic chars
	+          Folder
	^          CurrentFolder
	-          LastFolder
	!!         LastFolder
	<          Record
	>          Mbox
	!          Spoolfile
	@user      save-hook path for user
	=          Folder
	~/         HomeDir
	~user/     user's Home dir
	/full/path Absolute path
	rel/path   Relative path

mx_pretty(path, folder)
	probe(path) -> type
	if mxapi.pretty delegte
		maildir, etc, tidy path (tilde)
		imap tidy *sub*path
		notmuch -> NULL?

--------------------------------------------------------------------------------

any function using an M needs to resolve paths themselves
distinguish "folders" / "mailboxes" that *must* be local files/dirs
add flag to canonical Mailboxes
create/delete/rename M available in index
	(pager too if any M functions are available)
		can't find any
delete/rename work on current M
	create prompts with current $folder!
should they be sidebar functions?
	or both?

--------------------------------------------------------------------------------

Path resolver - Buffer + flags
	char[] would be easier
States:
	unknown
	+pretty
	resolved
	canonical
	(r, c have magic)
resolve() p->r -- neo function, need $folder
pretty() r->p  -- neo function, need $folder
resolve needs to *tidy*?
	but not canonicalise
	collapse paths, but not symlinks?
	NO leave path as user intended?
	(use canon for comparison)
canon() r->c -- backend function
*flags* for state (U|P|R|C)
*flags* for local/remove/virtual?
How do we:
	u->p
	u->r
when do we probe?
	part of resolve?
	YES.  need to probe before we can tidy()
flag for URI format path!
	like 'stat' flag

--------------------------------------------------------------------------------

change folder - free form string
Path { "freeform", NULL, UNKNOWN }
resolve '+' etc, probe tidy
Path { "tidy", NULL, TYPE }
find_M needs canon for path_compare
	who does 'canon'? compare
find_M -> ∀A, ∀M compare(M.path, test.path)
find_M (a maibox function) doesn't need to know about canon
compare (a path function) canons both paths as necessary
does the +pretty name belong in Path? NO $folder may change
does the "desc name" belong in Path? Possibly.  use in browser, etc
separate path API from MXAPI?  can local M's share path functions?

path/mailbox types
	18 PATH
	6 MAILBOX
Path
	user -> tidied  ../ etc
	canon -> resolve symlinks
		use during config parting (for loop detection)
Distinguish between: FILE, DIR, EITHER?
	MUST_EXIST flag?
	WILL_CREATE flag?
Pretty(P) -> ~/ on user path
fopen(P) => P cannot contain '~'
Allow/disallow relative paths?
	or always expand?
P of ../dir can't canonicalise it '.' might change
resolve(P) turns relative path into absolute path
	resolve is a Mailbox thing
want a Path specifiy tidy?
	what about P/M vas?
	NO probe and use mxapi tidy
upstream resolve doesn't expand symlinks
	or do realpath (in pretty)
path *type* (with Mailbox flag)
	type, flags live in libcore
type is away of mxapi
	or plain PATH type is only path aware
mailbox type is mxapi-aware, can delegate to PATH type
PATH could delegate to STRING?
Config - what does "get" offer?  "user" or "canon" string?
	USER string, if we want canon, then get_native object
PATH needs global HomeDir (will probably end up in N.user_info)
set_path(P), path_tidy(P)
	or set user to anything, absolute, relative, ~/, then resolve on fopen?
	canon is useless
only tidy if absolute or ~/ (can then be canonicalised if necessary)
	means attach_save_dir "./" is OK
set mailbox(M) - probe, if "local" type delegate to PATH
	resolve, probe, tidy

Path { orig, canon, tidy, flags }

DT_PATH test
	file | dir
	absolute | relative | tilde
	clean | dirty (dir/..)
	symlink | real
	trailing slash | none

store as (abs|rel|tilde)
	tidy abs dirty
	expand for use?  NO
or expand before save?  BEFORE

expand before => fopen(C_X) will succeed without processing C_X

investigate nntp_expand_path

does struct Path need void *data for parsed URI info?

rename path2 wrappers to imap_* for debugging purposes

when to we canon +trash?
	just before use?
	or dup, then canon?  probably

maildir canon
	strip ",flags" from path, or ":"?

path always open with "orig", compare with "canon"

contract in Path API docs
	RESOLVED, CANON, NOT NULL, etc

--------------------------------------------------------------------------------

mailboxes X

1) no A, no M
2) A, match M
3) A, no match M

--------------------

resolve(X)
tidy(X)
find_A(X)
∀ A API->ac_find()

--------------------

1) mailboxes imap://host.com/path
	find_A -> no
	create_A(P) -> A(scheme, host, path?)

folder = imap://host.com
mailboxes +path
	resolve, tidy

find_A(P)
create_A(P) -> A(scheme, host, path?)

mailboxes +banana
	resolve, tidy

	find_A(P)
	∀ A match type
	A->match(A,P)
		doesn't use compare
		doesn't canon
		incomplete info
		until login

--------------------

find A -> no match
	create A(P)
find A -> match
	OK

A->match(A,P) -> M
	match -> use M -> unhidden
	no match

create M(P)
	A->ac_add(M)
	setup A -> M mappings
	config/notify setup (M)

--------------------

ac_add(A,M) 1st M
A->adata->conn_acc

--------------------

parse string
create P(str)
resolve/tidy(P) || fail
find_by_name(P)

--------------------

imap lsub
create P(str)
	already resolved/tidy by defn
find_by_name(P) we know A => find_by_name2(A,P)

--------------------

find_by_name(P) already probed/resolved
∀ A call A->match(P) || create A
	=> A
find_by_name2(A,P)

--------------------

find_by_name2(A,P)
	A->find_M(P) && success
		unhide, notify, finish
	create M(P)
	A->ac_add(M)
	config/notify setup(M)

--------------------

find_by_name(P) A->match(P) no matches
	create A(P) || fail
	=> A(scheme, host, path?)

--------------------

named_mailboxes - where does the N go?
	find_by_name2(A, P, N)

--------------------

resolve() needs to understand N, too
resolve(P) -> M
<save-message>N  how

--------------------

is N stored in P?  probably.  YES!
=>pretty(P) -> N, or +N, or fail
returns ptr to P.pretty
if N, return N
if $folder, abbr, set N, return N
else return P.orig (tidy, non canon)
canon(P) returns P.canon if exists
or mx.canon(P), then return P.canon
path(P) returns P.orig

--------------------

test named_mailboxes, *then* lsub
	lsub _then_ named_mailboxes

--------------------

resolve(str) => P
	full path, +rel, desc, local path!

mx_path2_resolve(str) => P
	P.orig = str
	probe(P) success => full path (to M)
	resolve(P) success => +rel
	search (P) success => "desc"
	else local file/dir?

do I care which?

-------------------- 

resolve(P) +rel (and tidy)
probe(P) ∀ non-local types
	success => finish, return P
∀ M match "desc"
	success => finish, return copy of M.P
probe(P) ∀ local types
	success => tidy path, return P

-------------------- 

find_M(desc, A)
	A optional to search first!
get_all_M(A), list A first (optional)
if multiple matches, complete to current A first

-------------------- 

find_desc(desc,A) => M (A optional)
∀ M match name -> success, return M
else
	resolve (P) +rel (and tidy)
	probe (P) ∀ non-local
	probe (P) ∀ local + tidy ~ or relative
find_P(P,A) -> M (A optional)
	return M
else
	unrecognised
	no such M

who creates new M on Imap?

--------------------------------------------------------------------------------

<change-folder>
full - fully qualified path
+rel - abbreviated using $folder
desc - descriptive name

P.orig = str

--------------------

find_M(P) => M  (P,A)?
	success M, free P
	fail create M from P

1) find_desc (P.orig, A) -> M
2) resolve(P) (and tidy)
3) probe (P) ∀ non-local
4) probe (P) ∀ local (and tidy)
5) find_P(P,A) -> M

--------------------

1) find_by_desc(P,A) -> M
	if A, A->find_by_desc(P) -> M
	else ∀ A, A->find_by_desc(P) -> M
	dup_path(P)?

2) resolve(P)
	expand '+', etc

3) probe(P) non-local 	}
	API->probe(P)	}
			}- or fail
4) probe(P) local	}
	API->probe(P)	}

5) API->tidy(P)

6) find_by_path(P,A) -> M
	if A, A->find_by_path(P) -> M
	else ∀ A, A->find_by_path(P) -> M
	dup_path(P)?

--------------------

M => known mailbox
NULL => error, or unknown!
if (P.type) && (P.orig)
	valid path to try to open
create M(P) -> M

--------------------

what should mbox_open() take?
	mbox_open(M)
	mbox_open(P)
	mbox_open(str)
who should create the MV/Context?
what should happen to the P,M,PV after?
which are delegated?, e.g. to A?

--------------------

All of the above

mbox_open(M) -> int
	existing M
	or new M with resolved P

--------------------

mbox_open(P) > int
	resolve(P)	}
	tidy(P)		}- might fail
	probe(P)	}
	find_M(P) -> M
	new_M(P) -> M
	mbox_open(M) - NO can't return M!

--------------------

Do functions handle error messages?
*who* frees *what* on all error paths?

--------------------

string L (location)
resolve (L) -> P (tidy)
find(P) -> M
	drop P, flag M, done
new_M(P) -> M

--------------------

Account
	current A (account command)
	ac_add(M)
		notify, done
	fail -> continue

--------------------

find_A(M) -> A
	ac_add(M)
		notify, done
	fail -> continue

--------------------

new_A() -> A
	ac_add(M)
		notify, done
	fail -> STOP

--------------------

if curr A, sub = A->sub
else sub = N->sub
resolve(L, $folder) -> P

--------------------

when mailboxes?  A?
	config		Y|N
	cli (-e)	Y|N
	command (:)	Y|N
	source		Y|N
		account x mailboxes M
		account x source S

--------------------

n -f +jim/bob

--------------------

Mailbox *config*type*?

mbox, postponed, record, spoolfile, trash, folder?
store as Path?
probably incomplete "+sent"
only resolve at time of use
validator for $folder
it must be probe-able -> Path
store all in Path
type PARTIAL? NO
	don't want to alter string on use
	copy it into path and resolve
flag as DT_STRING | DT_MAILBOX
Validator [+=]* OK?
	or probe(X) == 0
probe will fail for non-existent local file/dir

--------------------------------------------------------------------------------



