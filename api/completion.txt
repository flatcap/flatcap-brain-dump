Auto-Completion API

Encapsulate all the completion code to make it easier to test and maintain.

- Create an Auto-Completion library -- separate the code from the rest of NeoMutt
- Create an API (list of functions) that everyone uses

This library should be only be dependent on libmutt.

The auto-completion code is given:
- a list of possible symbols to match
- what the user has typed so far

It replies by:
- doing nothing (no matches)
- completing the symbols (one match found)
- returning the list of matching symbols
  The user can either <kbd>Tab</kbd> through them or select from a menu

Currently, this code is scattered throughout NeoMutt and often uses global
variables.  It needs to be separated and tidied up.

--------------------------------------------------------------------------------

create, populate, query, destroy

query flags: ignore case, fuzzy, magic (dash==underscore), regex (~=fuzzy?), partial

pass list[] { flags, string }
need work buffer (matching length of longest string)
need cursor position
complete *over* flag
	abc|de<tab> -> abcdef|

option to match first, then cycle
match longest
	client responsibility

highlighting of matches for fuzzy/partial

flag partial: (anywhere in string)
	anchor: start, none, end

multi-field matching?  e.g. Index
pass [] { flags, str1, str2, etc }

flags control which are matched?  flags âˆ€ strings?
C.add_column(flags, [], num)
	have [] of flags for matches
	doesn't add data, just flags behaviour
C.add_row() probably better
	for data

need set of matcher callback functions
	pass flags, row

string data passed in is const

self-contained, except for libmutt
build and test in test-library repo branch

has a static vars (init.c)
	#define NUMVARS mutt_array_size(MuttVars)
	#define NUMCOMMANDS mutt_array_size(Commands)

	/* Initial string that starts completion. No telling how much the user has
	* typed so far. Allocate 1024 just to be sure! */
	static char UserTyped[1024] = { 0 };

	static int NumMatched = 0;          /* Number of matches for completion */
	static char Completed[256] = { 0 }; /* completed string (command or variable) */
	static const char **Matches;
	/* this is a lie until mutt_init runs: */
	static int MatchesListsize = MAX(NUMVARS, NUMCOMMANDS) + 10;

	#ifdef USE_NOTMUCH
	/* List of tags found in last call to mutt_nm_query_complete(). */
	static char **nm_tags;
	#endif

encapsulate & refactor
	sort variables, etc before auto-completion
		or properly sort the sources of the strings

<tab> needn't complete, it could just display the possiblities
	even when there's only one match

when completing in the message window, hijack the status window for possible matches?
	NO status window might be status-on-top, or missing (future)
	use mutt_window_reflow_message_rows() to make message window bigger temporarily

vim-options (wildmode)
	""		Complete only the first match.
	"full"		Complete the next full match.  After the last match,
			the original string is used and then the first match
			again.
	"longest"	Complete till longest common string.  If this doesn't
			result in a longer string, use the next part.
	"longest:full"	Like "longest", but also start 'wildmenu' if it is
			enabled.
	"list"		When more than one match, list all matches.
	"list:full"	When more than one match, list all matches and
			complete first match.
	"list:longest"	When more than one match, list all matches and
			complete till longest common string.

--------------------------------------------------------------------------------

struct CompleteItem
{
	char *string;
	int flags;
	void *data;
};

struct Complete
{
	char *orig;
	int cursor;
	int flags;
	int num_matches;

	int first_match;
	int curr_match;

	struct CompleteItem **items;
	int num_items;
	int max_items;

	void (*cdata_free)(void **ptr);
};

struct Complete *comp_new(void)
{
}

void comp_free(struct Complete **ptr)
{
}

int comp_add_data(struct Complete *comp, const char *name, void *data)
{
}

DATA
	adam
	alanb
	alanj
	alexg
	alicia
	amanda

ORIG
	[al|      ]
COMPLETE
0	[al|      ]	initial state
1	[alanb|   ]	1*<tab>
2	[alanj|   ]	2*<tab>
3	[alexg|   ]	3*<tab>
4	[alicia|  ]	4*<tab>
5	[al|      ]	5*<tab>, no matches, return to start

--------------------------------------------------------------------------------

Existing completion functions
	alias_complete
	complete_all_nm_tags
	complete_hosts
	imap_complete
	mutt_command_complete
	mutt_complete
	mutt_hist_complete
	mutt_label_complete
	mutt_nm_query_complete
	mutt_nm_tag_complete
	mutt_var_value_complete
	nntp_complete
	query_complete

