compilers: gcc, clang
features: all, none, random mix?
os: linux, osx?
travis - tag the latest successful build?

travis:
	15 x old features - updates only on backported code
	15 x new features - updates seldom (existing features)
	2 x mutt (default, stable) => full set of config options (updates often)
	2 x neomutt => full set of config options - updates - old: seldom, new: often
	pull-requests - seldom -> often

watch
	feature/*
	neomutt
	coverity
	mutt/{default,stable}

ignore
	feature5/*
	neomutt5
	issue/*
	mutt/{1.5.24,1.6.0}
	devel*/*
	flatcap/*
	release*/*
	contrib/*

TRAVIS_BRANCH          For builds not triggered by a pull request this is the name of the branch currently being built; whereas for builds triggered by a pull request this is the name of the branch targeted by the pull request (in many cases this will be master).
TRAVIS_BUILD_DIR       The absolute path to the directory where the repository being built has been copied on the worker.
TRAVIS_BUILD_ID        The id of the current build that Travis CI uses internally.
TRAVIS_BUILD_NUMBER    The number of the current build (for example, “4”).
TRAVIS_COMMIT          The commit that the current build is testing.
TRAVIS_COMMIT_RANGE    The range of commits that were included in the push or pull request.
TRAVIS_JOB_ID          The id of the current job that Travis CI uses internally.
TRAVIS_JOB_NUMBER      The number of the current job (for example, “4.1”).
TRAVIS_OS_NAME         On multi-OS builds, this value indicates the platform the job is running on. Values are linux and osx currently, to be extended in the future.
TRAVIS_PULL_REQUEST    The pull request number if the current job is a pull request, “false” if it’s not a pull request.
TRAVIS_REPO_SLUG       The slug (in form  owner_name/repo_name) of the repository currently being built. (for example, “travis-ci/travis-build”).
TRAVIS_SECURE_ENV_VARS Whether or not encrypted environment vars are being used. This value is either “true” or “false”.
TRAVIS_TEST_RESULT     is set to 0 if the build is successful and 1 if the build is broken.
TRAVIS_TAG             If the current build for a tag, this includes the tag’s name.

Travis build steps

 1 before_install
 2 install
 3 before_script
 4 script
 5 after_success / after_failure
 6 after_script
 7 before_deploy
 8 deploy
 9 after_deploy

caches $HOME/.ccache, and adds /usr/lib/ccache to the front of $PATH.

CI=true
TRAVIS=true
CONTINUOUS_INTEGRATION=true
DEBIAN_FRONTEND=noninteractive
HAS_JOSH_K_SEAL_OF_APPROVAL=true
USER=travis (do not depend on this value)
HOME=/home/travis (do not depend on this value)
LANG=en_US.UTF-8
LC_ALL=en_US.UTF-8
RAILS_ENV=test
RACK_ENV=test
MERB_ENV=test
JRUBY_OPTS="--server -Dcext.enabled=false -Xcompile.invokedynamic=false"
JAVA_HOME is set to the appropriate value.


Disabling the Subsequent Test Run

Due to the way that Travis CI addons operate, your standard script stage (i.e.
your tests) will run after the Coverity Scan analysis completes. In order to
avoid this, you can modify your script directive in .travis.yml.

The COVERITY_SCAN_BRANCH environment variable will be set to 1 when the
Coverity Scan addon is in operation. Therefore, you might change your script
from

script: make

to

script: if [ "${COVERITY_SCAN_BRANCH}" != 1 ]; then make ; fi

only features*/*, neomutt* + pull-requets
+ mutt/* NO, not 1.5.24, 1.6.0 (fixed)

neo, mutt -- full spread
feautre*/*  (16x2) except sidebar,notmuch
exceptions for anything with a configure option

fast-finish: true?

