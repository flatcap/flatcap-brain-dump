simplify cppcheck example
	cppcheck --enable=all --language=c --std=c99 -i autosetup --platform=unspecified -D_POSIX_PATH_MAX=4096 -DPATH_MAX=2048 -I/usr/include -I/usr/include/mit-krb5 -I. --output-file=cppcheck.xml --xml --xml-version=2 <path to neomutt source code directory>
	cppcheck --enable=all --language=c --std=c99 -i autosetup -D_POSIX_PATH_MAX=4096 -DPATH_MAX=2048  -I. --output-file=c1  .
use --check-config to list missing header files
	cppcheck --verbose --check-config --enable=all --language=c --std=c99 -i autosetup -i test -DPATH_MAX=2048 -D__x86_64__ -I. -I/usr/include -I/usr/lib/gcc/x86_64-redhat-linux/8/include -I/usr/include/qdbm --output-file=c1 .
	ignore doc dir too

fix !USE_NNTP build
	check !USE_SIDEBAR build

free functions to take (**ptr)
then deref to Type *t = *ptr;

add printf format checkers to mutt_message, mutt_debug, etc

test int against 0
	what about ALL int members?

demote to warnings
mutt_error(_("Warning: XXX"));

simplify all our:  if (X) free(X)
add doxy param doc: (NULL safe) ?

if (!(a && b))
if (!(a || b))
ag 'if \(!\(.*(&&|\|\|).*\)\)'

ag '\(!\((.*) && (.*)\)\)'
ag '\(!\((.*) \|\| (.*)\)\)'

eliminate enum AccountType?
use enum MailboxType
	what about smtp?
	add entry?

split up multiple assignments
	grep " = [^,;]* = "
	grep " = [^,;]* [!=]= "

conditional constants - reduce to a comment
	Hmm... non-functional enum entries might cause problems
	MENU_KEY_SELECT_PGP
	MENU_MIX
	MT_COLOR_DIVIDER
	MUTT_PAT_NEWSGROUPS
	MUTT_OPEN_HOOK
	REDRAW_SIDEBAR

body_copy() : move foreach param -> param_dup()

check all src against vim folding

pager
	replace CHECK_* macros with function
	bool pre_requisite(flag|flag, quiet);
	if (!pre_requisite())
		break
	need interface for index/pager operations?
	what are possible outcomes?
	break (continue loop)
	exit (function)
	fallthrough? NO refactor to avoid

replace "for (int" -> size_t in libmutt
	177 occurrences

browser.c has a lot of
	struct Email *tmp;
	tmp's a bad name for a variable
	scratch is too

move all
	if (!param)
	to start of function
	return early
	ag "^ +if \(.*\n +return"
	2540 functions
	start with libmutt?

decrypt_part - Explain r_is_signed better
	returns -1, 0, 1, 2

are these identical? YES
	static char crypt_flags(KeyFlags flags)
	static char pgp_flags(KeyFlags flags)

convert to enum?
	struct ConnAccount.type
		unsigned char type;     ///< Connection type, e.g. #MUTT_ACCT_TYPE_IMAP

config system
	can it return warnings?
	yes, but it doesn't

init.c
	getsid() is POSIX2001
	no need for #ifdef?
	exists in cygwin

variables, urgh! sendlib.c
	mutt_lookup_mime_type() int szf, sze, cur_sze;

deglobalise
	EnvList in mutt/envlist.c
	C_HiddenTags in driver_tags_add()

string fn to pretty print \t, \r, \n for tests
	handle NULL, quote string

mutt_parse_rc_line(char *line, struct Buffer *token, struct Buffer *err)
	'token' is a tmp buffer -> 'tmp' (or 'scratch')
	or eliminate it with the BufferPool

wrong name, should be _free()
	void mutt_addrlist_clear(struct AddressList *al)
	...
	mutt_addr_free(&a);
	hmm... but it doesn't free the actual AddressList

This doesn't seem to be documented in neomutt's manual either
I wonder if we could kill this unexpected behaviour
  /* This is an undocumented feature of ELM pointed out to me by Felix von
   * Leitner <leitner@prz.fu-berlin.de> */
  if (mutt_str_strcmp(mutt_b2s(buf), ".") == 0)
    mutt_buffer_strcpy(buf, LastSaveFolder);
  else
    mutt_str_strfcpy(LastSaveFolder, mutt_b2s(buf), sizeof(LastSaveFolder));

SEND_NO_FREE_HEADER refers to an Email, SEND_NO_FREE_EMAIL?

should be _free() -> need _new() too
	void mutt_bcache_close(struct BodyCache **bcache)

flags typedef?
	/* force flags passed to mutt_mailbox_check() */
	#define MUTT_MAILBOX_CHECK_FORCE       (1 << 0)
	#define MUTT_MAILBOX_CHECK_FORCE_STATS (1 << 1)

flagify
	#define MUTT_UNBIND  1<<0
	#define MUTT_UNMACRO 1<<1

mutt_mailbox.c rename var?
	struct stat contex_sb;

rename to 'index'?
	hdrline.c
	struct HdrFormatInfo

find out meaning of "ci_" prefix, or drop it (curses interface?)
	CI_is_return
	ci_bounce_message
		bounce_message
		ci_bounce_message
		mutt_attach_bounce
		mutt_bounce_message
	ci_first_message
	ci_next_undeleted
	ci_previous_undeleted
	ci_send_message
		ci_send_message
		mix_send_message
		mutt_resend_message
		send_message

eliminate complicated macros (multiline, conditionals, many callers)
refactor complicated or oft-used macros
	compose.c:118:1:     CHECK_COUNT
	email/mime.h:77:1:   is_multipart
	email/mime.h:83:1:   TYPE
	email/mime.h:85:1:   ENCODING
	index.c:144:1:       CAN_COLLAPSE
	mutt/buffer.h:43:1:  MoreArgs
	mutt/regex3.h:52:1:  REG_COMP
	mutt/string2.h:47:1: SKIPWS
	mutt/string2.h:51:1: terminate_string
	mutt/string2.h:60:1: terminate_buffer
	pager.c:254:1:       IsAttach
	pager.c:255:1:       IsMsgAttach
	pager.c:257:1:       IsEmail
	pager.c:261:1:       CHECK_MODE
	pager.c:269:1:       CHECK_READONLY
	pager.c:277:1:       CHECK_ATTACH
	pager.c:285:1:       CHECK_ACL
	pattern.c:93:1:      CTX_MSGNO
	recvattach.c:82:1:   CHECK_READONLY
	recvattach.c:100:1:  CHECK_ATTACH
	state.h:55:1:        state_puts
	state.h:56:1:        state_putc
-------------
	state_puts       98
	MoreArgs         78
	SKIPWS           51
	IsEmail          42
	CHECK_ATTACH     42
	TYPE             35
	CHECK_READONLY   34
	CHECK_MODE       32
	state_putc       30
	CHECK_ACL        28
	IsMsgAttach      22
	CHECK_COUNT      19
	REG_COMP         18
	IsAttach         10
	terminate_buffer 9
	is_multipart     8
	ENCODING         7
	terminate_string 5
	CTX_MSGNO        5
	CAN_COLLAPSE     5

these 2 typedefs don't match the pattern for function typedefs
	header_cache_t    hcache/hcache.h   /^typedef struct EmailCache header_cache_t;$/;"
	keycode_t         keymap.h          /^typedef short keycode_t;$/;"

main.c
	text outside of else, search for others (over 60 comments before else)
	/* If editing the infile, keep it around afterwards so
	 * it doesn't get unlinked, and we can rebuild the draft_file */
	else

neomuttlog.vim
	offer to vim ml

needs typedef
needs NO_FLAGS
#define U_PATH          (1 << 1)

why are enum SortType numbered?
	SORT_ALPHA    =  3, ///< Required by makedoc.c
	SORT_SUBJECT  =  3, ///< Sort by the email's subject
	do we need SORT_MAX
	do we need ANY X_MAX enum values?

should use a Buffer
	void mutt_default_save(char *path, size_t pathlen, struct Email *e)
	problem: it leads to format functions that take buf, buflen

struct Command has intptr_t data, but callback function has unsugned long data
	command_t

