fix !USE_NNTP build
	check !USE_SIDEBAR build

drop #1234 refs to trac or gitlab

free functions to take (**ptr)
then deref to Type *t = *ptr;

change to return enum
change callers to use enum
int query_quadoption(int opt, const char *prompt)

add printf format checkers to mutt_message, mutt_debug, etc

test int against 0
	what about ALL int members?

demote to warnings
mutt_error(_("Warning: XXX"));

what are deps of url_parse_mailto()
can it be promoted to library?

simplify all our:  if (X) free(X)
add doxy param doc: (NULL safe) ?

split up MuttMisc into separate enums

if (!(a && b))
if (!(a || b))

eliminate enum AccountType?
use enum MailboxType
	what about smtp?
	add entry?

mutt_set_flag - last param is bool
	tricky, intersects with other functions

split up multiple assignments
	grep " = [^,;]* = "
	grep " = [^,;]* [!=]= "

conditional constants - reduce to a comment
	Hmm... non-functional enum entries might cause problems
	MENU_KEY_SELECT_PGP
	MENU_MIX
	MT_COLOR_DIVIDER
	MUTT_NEWSGROUPS
	MUTT_NEW_SSL_SOCKET
	MUTT_NM_QUERY
	MUTT_OPEN_HOOK
	REDRAW_SIDEBAR

body_copy() : move foreach param -> param_dup()

FILE *x -> fp
	61 FILE *fp
	20 FILE *fpout
	17 FILE *f
	9 FILE *tmpfp
	6 FILE *ofp
	6 FILE *fpin
	5 FILE *tempfp
	5 FILE *ifp
	5 FILE *fperr
	4 FILE *smimein
	4 FILE *pgpout
	4 FILE *pgpin
	4 FILE *pgperr
	3 FILE *tfp
	3 FILE *smimeerr
	3 FILE *in
	2 FILE *smimeout
	2 FILE *savefp
	2 FILE *parent_fp
	2 FILE *fptmp
	2 FILE *decoded_fp
	1 FILE *tmpfp2
	1 FILE *root_fp
	1 FILE *rc
	1 FILE *outer_fp
	1 FILE *out
	1 FILE *nfp
	1 FILE *newsrc_fp
	1 FILE *new_fp
	1 FILE *lockfp
	1 FILE *fpfilterout
	1 FILE *fout
	1 FILE *fin
	1 FILE *filter
	1 FILE *fd1
	1 FILE *devnull
	1 FILE *bfp
	1 FILE *attf
	1 FILE **smimeerr
	1 FILE **fp_idx

check all src against vim folding

return statements that might be converted to "return rc;"
     25 return r;
     24 return ret;
      7 return retval;
      6 return result;
      2 return rv;
      2 return return_key;
      2 return res;
      2 return reg;
      1 return rset;
      1 return right;
      1 return results;
      1 return resbuf;

kill plural enums, e.g. MaiboxType*s*
	add to style docs
however WidgetFlags can be plural
	(1 << 6)...

go through all large switch statements
	index(2038)
	compose(1077)
	pager(1041)
	browser(777)
	enter(452)
	start by adding {} to all cases
	localise all variables
	except big buffers?
	start with loop variables
change switch to [opcode, fn()] table
	pass(op, ctx, flags?) -> 100s functions

index/pager
	replace CHECK_* macros with function
	bool pre_requisite(flag|flag, quiet);
	if (!pre_requisite())
		break
	need interface for index/pager operations?
	what are possible outcomes?
	break (continue loop)
	exit (function)
	fallthrough? NO refactor to avoid

init.c
	getsid() and getpid() are POSIX2001
	no need for #ifdef?
	check with cygwin

replace "for (int" -> size_t in libmutt
	177 occurrences

buffer_init() vs = { 0 }?

change OPT_NO_CURSES to OPT_USE_CURSES
	and reverse the logic
	uses: 14 OPT_USE_CURSES, 33 !OPT_USE_CURSES
	this means defaulting a global bool to true

param names differ
	hcache_bdb_close
	hcache_gdbm_close
	hcache_kyotocabinet_close
	hcache_lmdb_close
	hcache_qdbm_close
	hcache_tokyocabinet_close

browser.c has a lot of
	struct Email *tmp;
	tmp's a bad name for a variable

move all
	if (!param)
	to start of function

formatting - whitespace
	#define MUTT_TOKEN_EQUAL         (1<<0)  /**< treat '=' as a special */

there are 9 R_ flags
	'BOTH' isn't really meaningful
	#define R_BOTH        (R_INDEX | R_PAGER)
	#define R_RESORT_BOTH (R_RESORT | R_RESORT_SUB)

eliminate once-used define
	#define MUTT_MODEFMT "-- NeoMutt: %s"

local variables with capitals
	addrbook.c:191:         AliasTable
	browser.c:1105:         GotoSwapper
	ncrypt/pgpkey.c:331:    KeyTable
	ncrypt/pgpkey.c:594:    KeyTable
	ncrypt/cryptglue.c:125: PGP
	ncrypt/cryptglue.c:175: PGP
	ncrypt/cryptglue.c:232: PGP
	ncrypt/cryptglue.c:307: PGP
	ncrypt/cryptglue.c:338: PGP
	ncrypt/cryptglue.c:347: PGP
	query.c:330:            QueryTable
	ncrypt/cryptglue.c:128: SMIME
	ncrypt/cryptglue.c:356: SMIME
	ncrypt/cryptglue.c:400: SMIME
	ncrypt/cryptglue.c:409: SMIME
	ncrypt/cryptglue.c:462: SMIME
	ncrypt/cryptglue.c:493: SMIME
	hdrline.c:669:          T
	ncrypt/smime.c:443:     Table
	browser.c:1009:         TargetDir

name clashes with IMAP_CMD *flags*
turn into an enum
	/* IMAP command responses. Used in ImapCommand.state too */
	#define IMAP_CMD_OK       0  /**< `<tag> OK ...` */
	#define IMAP_CMD_BAD      -1 /**< `<tag> BAD ...` */
	#define IMAP_CMD_NO       -2 /**< `<tag> NO ...` */
	#define IMAP_CMD_CONTINUE 1  /**< `* ...` */
	#define IMAP_CMD_RESPOND  2  /**< `+` */
	#define IMAP_CMD_NEW      3  /**< ImapCommand.state additions */

decrypt_part - Explain r_is_signed better
	returns -1, 0, 1, 2

