simplify cppcheck example
	cppcheck --enable=all --language=c --std=c99 -i autosetup --platform=unspecified -D_POSIX_PATH_MAX=4096 -DPATH_MAX=2048 -I/usr/include -I/usr/include/mit-krb5 -I. --output-file=cppcheck.xml --xml --xml-version=2 <path to neomutt source code directory>
	cppcheck --enable=all --language=c --std=c99 -i autosetup -D_POSIX_PATH_MAX=4096 -DPATH_MAX=2048  -I. --output-file=c1  .
use --check-config to list missing header files
	cppcheck --verbose --check-config --enable=all --language=c --std=c99 -i autosetup -i test -DPATH_MAX=2048 -D__x86_64__ -I. -I/usr/include -I/usr/lib/gcc/x86_64-redhat-linux/8/include -I/usr/include/qdbm --output-file=c1 .
	ignore doc dir too

fix !USE_NNTP build
	check !USE_SIDEBAR build

drop #1234 refs to trac or gitlab

free functions to take (**ptr)
then deref to Type *t = *ptr;

add printf format checkers to mutt_message, mutt_debug, etc

test int against 0
	what about ALL int members?

demote to warnings
mutt_error(_("Warning: XXX"));

what are deps of url_parse_mailto()
can it be promoted to library?

simplify all our:  if (X) free(X)
add doxy param doc: (NULL safe) ?

if (!(a && b))
if (!(a || b))

eliminate enum AccountType?
use enum MailboxType
	what about smtp?
	add entry?

mutt_set_flag - last param is bool
	tricky, intersects with other functions

split up multiple assignments
	grep " = [^,;]* = "
	grep " = [^,;]* [!=]= "

conditional constants - reduce to a comment
	Hmm... non-functional enum entries might cause problems
	MENU_KEY_SELECT_PGP
	MENU_MIX
	MT_COLOR_DIVIDER
	MUTT_NEWSGROUPS
	MUTT_NEW_SSL_SOCKET
	MUTT_NM_QUERY
	MUTT_OPEN_HOOK
	REDRAW_SIDEBAR

body_copy() : move foreach param -> param_dup()

check all src against vim folding

index/pager
	replace CHECK_* macros with function
	bool pre_requisite(flag|flag, quiet);
	if (!pre_requisite())
		break
	need interface for index/pager operations?
	what are possible outcomes?
	break (continue loop)
	exit (function)
	fallthrough? NO refactor to avoid

init.c
	getsid() is POSIX2001
	no need for #ifdef?
	exists in cygwin

replace "for (int" -> size_t in libmutt
	177 occurrences

buffer_init() vs = { 0 }?

change OPT_NO_CURSES to OPT_USE_CURSES
	and reverse the logic
	uses: 14 OPT_USE_CURSES, 33 !OPT_USE_CURSES
	this means defaulting a global bool to true

browser.c has a lot of
	struct Email *tmp;
	tmp's a bad name for a variable
	scratch is too

move all
	if (!param)
	to start of function
	return early
	ag "^ +if \(.*\n +return"
	2540 functions
	start with libmutt?

decrypt_part - Explain r_is_signed better
	returns -1, 0, 1, 2

are these identical? YES
	static char crypt_flags(KeyFlags flags)
	static char pgp_flags(KeyFlags flags)

refactor to simplify copy.c:350
        if (mutt_write_one_header(out, 0, headers[x], (flags & CH_PREFIX) ? prefix : 0,
                                  mutt_window_wrap_cols(MuttIndexWindow, Wrap), flags) == -1)
	adray: This is unrelated to the naming, but this `if` statement should
	be modified to be more read able. Moving `(flags & CH_PREFIX) ? prefix
	: 0` and `mutt_window_wrap_cols(...)` out will make it significantly
	easier to understand.

variables, urgh! sendlib.c
	mutt_lookup_mime_type() int szf, sze, cur_sze;

name clashes with IMAP_CMD *flags*
turn into an enum
	/* IMAP command responses. Used in ImapCommand.state too */
	#define IMAP_CMD_OK       0  /**< `<tag> OK ...` */
	#define IMAP_CMD_BAD      -1 /**< `<tag> BAD ...` */
	#define IMAP_CMD_NO       -2 /**< `<tag> NO ...` */
	#define IMAP_CMD_CONTINUE 1  /**< `* ...` */
	#define IMAP_CMD_RESPOND  2  /**< `+` */
	#define IMAP_CMD_NEW      3  /**< ImapCommand.state additions */

param names differ
	hcache_bdb_close
	hcache_gdbm_close
	hcache_kyotocabinet_close
	hcache_lmdb_close
	hcache_qdbm_close
	hcache_tokyocabinet_close

convert to enum?
	struct ConnAccount.type
		unsigned char type;     ///< Connection type, e.g. #MUTT_ACCT_TYPE_IMAP

unnec checks
   if (fp_out)
     mutt_file_fclose(&fp_out);

misleading pre-increments
does this ++col get executed if first part of && is false?  NO!
	sendlib.c:1845:37:    if (!(chflags & CH_DISPLAY) && (++col >= 998))
	mutt/file.c:1097:45:    if ((prev_sb.st_size == sb.st_size) && (++count >= (timeout ? MAX_LOCK_ATTEMPTS : 0)))
	mutt/file.c:1165:45:    if ((prev_sb.st_size == sb.st_size) && (++count >= (timeout ? MAX_LOCK_ATTEMPTS : 0)))
	pager.c:2088:46:      if (!rd->line_info[i].continuation && (++j == rd->lines))

keymap.c
	no () around ternary condition
	check for others
	check uncrustify behaviour
	int i = C_Timeout > 0 ? C_Timeout : 60;

comment all escape sequences
	// Ctrl-F
	{ "forget-passphrase",         OP_FORGET_PASSPHRASE,            "\006" },

Tidy messages ending in .
	ag '\.\\n"'

these macros might want a '_' for clarity
	ANUM ATTRSET BAD BEEP BINDIR BLOCKSIZE CHUNKSIZE CURATTACH CYCLIC
	DEVRANDOM DIRECTION DOMAIN DTYPE EILSEQ EMSG ENCODING EXECSHELL FF FG
	FH FI FLAGGED FREE HCACHEVER HSPACE INITVAL IP ISHEADER ISPELL ISSPACE
	KILO MAILPATH MAX MAXERRS MAXMIXES MEGA MESSAGE MIN MUTTLOCALEDIR
	NONULL NUMCOMMANDS NUMVARS OP OPS PACKAGE PKGDATADIR PKGDOCDIR R0 R1 R2
	R3 R4 REGCOMP RSORT SENDMAIL SEQLEN SETCOLOR SKIPWS SOMEPRIME SORTCODE
	SWAP SYSCONFDIR TXTENRICHED TXTHTML TXTPLAIN TYPE UL UNREAD W WHERE

make sure all HEAD definitions are after the struct definitions:
	SLIST_HEAD(PatternHead, Pattern);

fix doxygen (notmuch + hcache)

typo
	bool mime            : 1; /**< has a MIME-Version email? */
	bool mime            : 1; /**< has a MIME-Version header? */

still lots of lowercase globals
	bool_values
	cc_cflags
	cc_version
	configure_options
	crypt_mod_pgp_classic
	crypt_mod_pgp_gpgme
	crypt_mod_smime_classic
	crypt_mod_smime_gpgme
	debugfile
	debugfilename
	debugfile_cmdline
	debuglevel
	debuglevel_cmdline
	envlist
	magic_values
	mx_comp_ops
	mx_imap_ops
	mx_maildir_ops
	mx_mbox_ops
	mx_mh_ops
	mx_mmdf_ops
	mx_nntp_ops
	mx_notmuch_ops
	mx_pop_ops
	optarg
	optind
	quad_values

muttindexwindow workaround

16 places where expando requires `Mutt*Window`
    addrbook.c:116:            mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(AliasFormat), alias_format_str,
    browser.c:1080:            mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols,
    browser.c:1087:            mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols,
    browser.c:1108:            mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(VfolderFormat),
    compose.c:254:             mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(AttachFormat),
    hdrline.c:1436:            mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, s,
    mutt_history.c:78:         mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, "%s", history_format_str,
    ncrypt/crypt_gpgme.c:3164: mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(PgpEntryFormat),
    ncrypt/pgpinvoke.c:185:    mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(fmt),
    ncrypt/pgpkey.c:343:       mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(PgpEntryFormat),
    ncrypt/smime.c:354:        mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(fmt),
    nntp/newsrc.c:1110:        mutt_expando_format(file, sizeof(file), 0, MuttIndexWindow->cols,
    query.c:311:               mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(QueryFormat),
    recvattach.c:428:          mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols, NONULL(AttachFormat),
    remailer.c:497:            mutt_expando_format(buf, buflen, 0, MuttIndexWindow->cols,
    sendlib.c:2715:            mutt_expando_format(cmd, sizeof(cmd), 0, MuttIndexWindow->cols,

config system
	can it return warnings?

fold ~/home/work/help/* into ~/docs
	and de-dupe

kill ~/home/done

clear ~/neo branches
	archive or delete

archive and close old PRs

update README.md contributors

buffer use alloc
	commands.c:669:6:  err.data = mutt_mem_malloc(err.dsize);
	hook.c:383:6:  err.data = mutt_mem_malloc(err.dsize);
	hook.c:451:6:  err.data = mutt_mem_malloc(err.dsize);
	hook.c:635:6:  err.data = mutt_mem_malloc(err.dsize);
	init.c:388:6:  err.data = mutt_mem_malloc(err.dsize);
	init.c:3401:6:  err.data = mutt_mem_malloc(err.dsize);
	init.c:3766:6:  err.data = mutt_mem_malloc(err.dsize);
	init.c:4306:6:  err.data = mutt_mem_malloc(err.dsize);
	mutt_lua.c:72:6:  err.data = mutt_mem_malloc(err.dsize);
	mutt_lua.c:283:6:  err.data = mutt_mem_malloc(err.dsize);
	pattern.c:1951:6:  err.data = mutt_mem_malloc(err.dsize);
	pattern.c:2088:10:      err.data = mutt_mem_malloc(err.dsize);

bool dupe -> const

encoder_t is a PTR
initialise to NULL
check for other typedefs

